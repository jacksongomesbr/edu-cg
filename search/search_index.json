{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-mkdocs","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"0-course/","title":"Curso","text":""},{"location":"0-course/#introducao","title":"Introdu\u00e7\u00e3o","text":""},{"location":"0-course/#o-conteudo-deste-livro","title":"O conte\u00fado deste livro","text":""},{"location":"0-course/#p5js","title":"p5.js","text":"<p>A p5.js \u00e9 uma biblioteca que fornece um ambiente para programa\u00e7\u00e3o criativa na web. Por \"programa\u00e7\u00e3o criativa\" entenda a utiliza\u00e7\u00e3o de c\u00f3digo para gerar arte e experi\u00eancias imersivas e interativas, como imagens que representam padr\u00f5es matem\u00e1ticos e interfaces interativas de jogos.</p>"},{"location":"1-computacao-grafica/","title":"Computa\u00e7\u00e3o Gr\u00e1fica","text":""},{"location":"1-computacao-grafica/#introducao-a-computacao-grafica","title":"Introdu\u00e7\u00e3o \u00e0 Computa\u00e7\u00e3o Gr\u00e1fica","text":"<ul> <li>Defini\u00e7\u00e3o</li> <li>Origens</li> <li>Elementos e intera\u00e7\u00f5es com outras disciplinas</li> <li>Aplica\u00e7\u00f5es</li> <li>Hardware de computa\u00e7\u00e3o gr\u00e1fica </li> <li>Representa\u00e7\u00e3o de gr\u00e1ficos<ul> <li>Pixel</li> <li>Resolu\u00e7\u00e3o geom\u00e9trica</li> <li>Representa\u00e7\u00e3o matricial (bitmap) e vetorial</li> <li>Densidade de pixel</li> <li>Representa\u00e7\u00e3o da cor</li> <li>Formatos de imagens bitmap</li> </ul> </li> </ul>"},{"location":"2-digital-imaging/","title":"Imagem Digital","text":""},{"location":"2-digital-imaging/#fundamentos-da-imagem-digital","title":"Fundamentos da imagem digital","text":"<ul> <li>Elementos da percep\u00e7\u00e3o visual<ul> <li>Estrutura do olho humano</li> <li>Forma\u00e7\u00e3o da imagem no olho</li> <li>Adapta\u00e7\u00e3o ao brilho e discrimina\u00e7\u00e3o</li> </ul> </li> <li>A luz e o espectro eletromagn\u00e9tico</li> <li>Sensores de aquisi\u00e7\u00e3o de imagens</li> <li>Um modelo simples de forma\u00e7\u00e3o de imagem</li> <li>Amostragem e quantiza\u00e7\u00e3o de imagens<ul> <li>Conceitos b\u00e1sicos de amostragem e quantiza\u00e7\u00e3o</li> <li>Representa\u00e7\u00e3o de imagens digitais</li> </ul> </li> <li>Formatos de imagens bitmap</li> </ul>"},{"location":"3-synthesis/","title":"Introdu\u00e7\u00e3o","text":""},{"location":"3-synthesis/#sintese-de-imagens","title":"S\u00edntese de imagens","text":"<p>A s\u00edntese de imagens, ou a gera\u00e7\u00e3o de imagens, mediada pela computa\u00e7\u00e3o gr\u00e1fica \u00e9 o interesse desta se\u00e7\u00e3o do curso. </p> <p>O foco principal \u00e9 a utiliza\u00e7\u00e3o de recursos de programa\u00e7\u00e3o para a gera\u00e7\u00e3o de imagens e experi\u00eancias interativas.</p> <p>Mais especificamente, o foco deste curso nesse sentido \u00e9 a utiliza\u00e7\u00e3o do Processing como recurso de programa\u00e7\u00e3o e cria\u00e7\u00e3o de arte e conte\u00fado interativo.</p>"},{"location":"3-synthesis/fundamentals/","title":"Fundamentos do Processing","text":""},{"location":"3-synthesis/fundamentals/#fundamentos-do-processing","title":"Fundamentos do Processing","text":"<p>Note</p> <p>O conte\u00fado deste curso, em termos de Processing, utiliza a p5.js (Processing para JavaScript)</p>"},{"location":"3-synthesis/fundamentals/#ambiente-de-desenvolvimento","title":"Ambiente de desenvolvimento","text":"<p>O p5.js pode ser utilizado diretamente no browser, por meio do p5.js Web Editor ou localmente, por exemplo, utilizando o Visual Studio Code (VS Code).</p> <p>No caso do Web Editor, sugiro que voc\u00ea crie uma conta de usu\u00e1rio para poder salvar seus sketches e, assim, ter acesso a eles em qualquer momento e de qualquer lugar. A utilizar o VS Code, recomendo utilizar em conjunto com um sistema de versionamento de c\u00f3digo-fonte como o Github.</p>"},{"location":"3-synthesis/fundamentals/#estrutura-do-sketch","title":"Estrutura do sketch","text":"<p>O sketch \u00e9 um arquivo de texto com c\u00f3digo-fonte escrito em JavaScript. Assim, a p5.js \u00e9 uma biblioteca para JavaScript que permite a cria\u00e7\u00e3o de programas coloridos, com recursos de anima\u00e7\u00e3o e intera\u00e7\u00e3o com os usu\u00e1rios. </p> <p>Ao utilizar o Web Editor, ele come\u00e7a com o seguinte c\u00f3digo inicial do sketch:</p> <pre><code>function setup() {\n\u00a0 createCanvas(400, 400);\n}\n\nfunction draw() {\n\u00a0 background(220);\n}\n</code></pre> <p>O c\u00f3digo (uma esp\u00e9cie de hello world) est\u00e1 dividido em dois blocos que se comportam de maneiras diferentes:</p> <ul> <li>bloco <code>setup()</code> executa apenas uma vez, assim que o sketch inicia sua execu\u00e7\u00e3o</li> <li>bloco <code>draw()</code> executa repetidamente enquanto o sketch est\u00e1 em execu\u00e7\u00e3o, por padr\u00e3o, 60 vezes por segundo (60fps)</li> </ul> <p>Al\u00e9m disso, o sketch utiliza duas fun\u00e7\u00f5es b\u00e1sicas:</p> <ul> <li><code>createCanvas()</code> cria um elemento <code>canvas</code> (do HTML) de acordo com os par\u00e2metros informados. No sketch, chamar <code>createCanvas(400, 400)</code> significa criar um canvas com \\(400 \\times 400\\) pixels</li> <li><code>background()</code> define a cor de fundo do background do canvas. No sketch, chamar <code>background(220)</code> significa pintar o canvas em um tom de cinza claro</li> </ul>"},{"location":"3-synthesis/fundamentals/#desenhando-formas","title":"Desenhando formas","text":"<p>O desenho de formas pode ser feito por meio de fun\u00e7\u00f5es que desenham \"primitivas\" geom\u00e9tricas, como <code>circle()</code> para desenhar c\u00edrculos e <code>rect()</code>, para ret\u00e2ngulos. O sketch a seguir utiliza fun\u00e7\u00f5es para desenhar algumas primitivas.</p> <p>Parte do sketch cont\u00e9m o seguinte.</p> <pre><code>var halfHeight;\n\nfunction setup() { ... }\n\nfunction draw() {\n  background(255);\n  point(10, halfHeight);\n  line(50, halfHeight, 150, halfHeight);\n  circle(200, halfHeight, 50);\n  rect(250, halfHeight - 25, 50, 50);\n  triangle(325, halfHeight + 25, 350, halfHeight - 25, 375, halfHeight + 25);\n}\n</code></pre> <p>O sketch utiliza a vari\u00e1vel <code>halfHeight</code> para armazenar o valor da metade da altura do canvas (que \u00e9 obtido a partir da constante <code>height</code>). </p> <p>A fun\u00e7\u00e3o <code>point()</code> desenha um ponto (por padr\u00e3o, de dimens\u00e3o \\(1 \\times 1\\) pixels) na coordenada <code>(x, y)</code>. Neste caso, o ponto \u00e9 desenhado na coordenada <code>(10, halfHeight)</code>.</p> <p>A fun\u00e7\u00e3o <code>line()</code> desenha uma linha reta da coordenada <code>(x1, y1)</code> at\u00e9 a coordeanda <code>(x2, y2)</code>. </p> <p>A fun\u00e7\u00e3o <code>circle()</code> desenha um c\u00edrculo a partir do centro na coordenada <code>(x, y)</code> com di\u00e2metro <code>d</code>. Neste caso, o centro do c\u00edrculo est\u00e1 exatamente no meio do canvas.</p> <p>A fun\u00e7\u00e3o <code>rect()</code> desenha um ret\u00e2ngulo com o canto superior direito na coordenada <code>(x, y)</code> com largura <code>w</code> e altura <code>h</code>. Perceba a matem\u00e1tica necess\u00e1ria para posicionar adequadamente o ret\u00e2ngulo, j\u00e1 que seu desenho n\u00e3o parte do centro, como no caso do c\u00edrculo, mas no canto superior esquerdo.</p> <p>Por fim, a fun\u00e7\u00e3o <code>triangle()</code> desenha um tri\u00e2ngulo com base em tr\u00eas coordenadas:</p> <ul> <li>a coordenada posicionada na base mais \u00e0 esquerda \u00e9 o in\u00edcio, a coordenada <code>(x1, y1)</code></li> <li>na sequ\u00eancia, a coordenada do topo <code>(x2, y2)</code></li> <li>por fim, na base e mais \u00e0 direita, a coordenada <code>(x3, y3)</code></li> </ul> <p>A figura a seguir ajuda a ilustrar essas informa\u00e7\u00f5es, indicando as coordenadas e os valores utilizados para o desenho de cada forma primitiva.</p> <p></p> <p>Na sequ\u00eancia das habilidades iniciais de lidar com a p5.js, temos a evolu\u00e7\u00e3o para utilizar recursos de anima\u00e7\u00e3o, o que mostra a pr\u00f3xima se\u00e7\u00e3o.</p>"},{"location":"3-synthesis/fundamentals/#animacao-basica","title":"Anima\u00e7\u00e3o b\u00e1sica","text":"<p>A fun\u00e7\u00e3o <code>draw()</code> est\u00e1 presente na estrutura do sketch para permitir executar c\u00f3digo dentro de um \"loop\", que geralmente executa cerca de 60 vezes por segundo. Da\u00ed uma associa\u00e7\u00e3o \u00e0 quantidade de \"quadro por segundo\" (frames per second, ou FPS).</p> <p>C\u00f3digo que realiza anima\u00e7\u00e3o, geralmente, altera valores de vari\u00e1veis ou par\u00e2metros dentro da fun\u00e7\u00e3o <code>draw()</code>. Por isso, o sketch a seguir ilustra como funciona o movimento de um c\u00edrculo para baixo, no eixo y.</p> <p>Desconsidere que o sketch tem v\u00e1rias informa\u00e7\u00f5es visuais extras na tela, o importante \u00e9 o controle da movimenta\u00e7\u00e3o do c\u00edrculo. Assim, a parte importante que queremos considerar est\u00e1 aqui.</p> <pre><code>var cx, cy;     // As coordenadas do centro do c\u00edrculo\nvar d = 50;     // O di\u00e2metro do c\u00edrculo\nvar r = d / 2;  // O raio do c\u00edrculo (metade do di\u00e2metro)\n\nfunction setup() {\n  createCanvas(400, 400);\n  cx = width / 2;\n  cy = height / 2;\n}\n\nfunction draw() {\n  // 1: desenha\n  background(220);\n  circle(cx, cy, d);\n\n  // 2: determina a pr\u00f3xima posi\u00e7\u00e3o\n  if (cy + r &lt; height - 1) {\n    cy++;\n  } \n}\n</code></pre> <p>As coordenadas do centro do c\u00edrculo, vari\u00e1veis <code>cx</code> e <code>cy</code>, s\u00e3o iniciadas na fun\u00e7\u00e3o <code>setup()</code> para estarem no centro do canvas. O c\u00f3digo da fun\u00e7\u00e3o <code>draw()</code> \u00e9 respons\u00e1vel por desenhar o c\u00edrculo na posi\u00e7\u00e3o atual e tamb\u00e9m atualizar pr\u00f3xima posi\u00e7\u00e3o do c\u00edrculo, incrementando o valor da vari\u00e1vel <code>cy</code> em uma unidade. O resultado disso \u00e9 que o c\u00edrculo \"parece\" se movimentar para baixo. </p> <p>De fato, isso determina um framework para o c\u00f3digo que realiza anima\u00e7\u00e3o:</p> <ol> <li>desenhar; e</li> <li>calcular e atualizar posi\u00e7\u00f5es e outros par\u00e2metros para o pr\u00f3ximo frame;</li> <li>repetir.</li> </ol> <p>Este framework vai ser atualizado para incluir outros elementos posteriormente, mas, por enquanto, ele \u00e9 fundamental para entendermos a l\u00f3gica da anima\u00e7\u00e3o baseada em atualiza\u00e7\u00e3o de quadros por segundo.</p>"},{"location":"3-synthesis/fundamentals/#deteccao-de-colisao","title":"Detec\u00e7\u00e3o de colis\u00e3o","text":"<p>A detec\u00e7\u00e3o de colis\u00e3o \u00e9 uma parte importante da anima\u00e7\u00e3o e da cria\u00e7\u00e3o de experi\u00eancias interativas em computa\u00e7\u00e3o gr\u00e1fica. \u00c9 esse o conceito que permite executar um c\u00f3digo diferente quando um objeto, por exemplo, um c\u00edrculo, encontra uma \u00e1rea que \u00e9 tomada por outro objeto, por exemplo, uma parede.</p> <p>A detec\u00e7\u00e3o de colis\u00e3o \u00e9 seguida por um tratamento, ou seja, o que deve ser feito quando ocorrer uma colis\u00e3o.</p> <p>Voltando ao exemplo da anima\u00e7\u00e3o do c\u00edrculo que vai para baixo, em dire\u00e7\u00e3o \u00e0 parte inferior do canvas, pdoer\u00edamos dizer que nosso interesse seria parar a anima\u00e7\u00e3o quando o centro do c\u00edrculo atingisse determinado valor na coordenada y. </p> <p>A l\u00f3gica, neste caso, precisa de um ajuste porque a coordenada do centro do c\u00edrculo n\u00e3o pode ser a mesma da altura do canvas porque isso faria com que metade do c\u00edrculo fosse desenhada para fora do canvas. Assim, precisamos considerar que a soma entre a coordenada y do centro do c\u00edrculo e o raio \u00e9 que deve ser menor do que a altura para que o c\u00edrculo continue se movendo.</p> <p>Essa l\u00f3gica \u00e9 representada no condicional dentro da fun\u00e7\u00e3o <code>draw()</code>.</p> <pre><code>function draw() {\n  // 1: desenha\n  background(220);\n  circle(cx, cy, d);\n\n  // 2: determina a pr\u00f3xima posi\u00e7\u00e3o\n  if (cy + r &lt; height - 1) {\n    cy++;\n  } \n</code></pre> <p>H\u00e1 ainda mais um ajuste: considerar a altura menos 1, que \u00e9 a unidade da linha de borda para desenho do c\u00edrculo.</p> <p>Note</p> <p>O formato padr\u00e3o de desenho do c\u00edrculo n\u00e3o \u00e9 apenas o c\u00edrculo, mas considera, al\u00e9m das propriedades j\u00e1 indicadas, uma borda de um pixel de unidade e o preenchimento.</p> <p>Essa l\u00f3gica complementa o framework de anima\u00e7\u00e3o:</p> <ol> <li>desenhar;</li> <li>calcular a pr\u00f3xima posi\u00e7\u00e3o;</li> <li>detectar colis\u00e3o;<ol> <li>se n\u00e3o tiver colis\u00e3o, atualizar a posi\u00e7\u00e3o;</li> <li>se tiver colis\u00e3o, n\u00e3o atualizar a posi\u00e7\u00e3o;</li> </ol> </li> <li>repetir.</li> </ol> <p>Com isso, temos anima\u00e7\u00e3o, detec\u00e7\u00e3o e tratamento de colis\u00e3o para que o movimento do c\u00edrculo dentro do canvas represente uma simula\u00e7\u00e3o mais confi\u00e1vel segundo alguns crit\u00e9rios de conhecimento do mundo real a respeito de como seria observar o fen\u00f4meno de uma esfera se movendo dentro de uma caixa.</p> <p>Para finalizar esta introdu\u00e7\u00e3o, o pr\u00f3ximo sketch introduz dois conceitos importantes: velocidade e dire\u00e7\u00e3o.</p>"},{"location":"3-synthesis/fundamentals/#velocidade-e-direcao","title":"Velocidade e dire\u00e7\u00e3o","text":"<p>O framework de anima\u00e7\u00e3o de movimento apresentado at\u00e9 aqui altera a posi\u00e7\u00e3o do c\u00edrculo em uma unidade. O que aconteceria se o incremento fosse em 5 ou 10 unidades? A resposta mais \u00f3bvia \u00e9 que o c\u00edrculo precisaria de menos quadros (passos de anima\u00e7\u00e3o) para chegar at\u00e9 a borda do canvas.</p> <p>Este \u00e9 um conceito intuitivo de velocidade: a magnitude do incremento na posi\u00e7\u00e3o faz com que o c\u00edrculo precise de menos ou mais quadros para alcan\u00e7ar a borda da caixa, ou seja, mais ou menos tempo, j\u00e1 que temos o conceito de quadros por segundo (FPS).</p> <p>Outro conceito importante \u00e9 o de dire\u00e7\u00e3o. Um incremento no eixo Y faz o c\u00edrculo se mover para baixo. Um decremento, ou um incremento de um valor negativo, faz o c\u00edrculo se mover para cima. Assim, podemos afirmar que o sinal do incremento determina a dire\u00e7\u00e3o:</p> <ul> <li>sinal positivo: para baixo;</li> <li>sinal negativo: para cima.</li> </ul> <p>O sketch a seguir ilustra estes conceitos.</p> <p>A parte que nos interessa do sketch est\u00e1 aqui.</p> <pre><code>var cx, cy;\nvar d = 50;\nvar r = d / 2;\nvar direction = +1;\nvar speed = 5;\n\nfunction draw() {\n  background(220);\n\n  // desenha c\u00edrculo\n  circle(cx, cy, d);\n\n  // calcula a pr\u00f3xima posi\u00e7\u00e3o\n  var nextcy = cy + speed * direction;\n\n  // detecta e trata colis\u00e3o\n  if (nextcy + r &gt; height || nextcy - r &lt; 0) {\n    direction = -direction;\n  } else {\n    cy = nextcy;\n  }\n}\n</code></pre> <p>A vari\u00e1vel <code>speed</code> determina a velocidade do movimento do c\u00edrculo e \u00e9 iniciada com o valor <code>5</code>. A vari\u00e1vel <code>direction</code> determina a dire\u00e7\u00e3o do movimento (para cima ou para baixo) e \u00e9 iniciada com o valor <code>+1</code> (o c\u00edrculo inicia movendo-se para baixo).</p> <p>Outra diferen\u00e7a para o sketch anterior est\u00e1 na forma como calculamos a pr\u00f3xima posi\u00e7\u00e3o. Agora precisamos levar em considera\u00e7\u00e3o n\u00e3o apenas o valor da coordenada y do centro do c\u00edrculo, mas tamb\u00e9m a velocidade e a dire\u00e7\u00e3o. A equa\u00e7\u00e3o a seguir representa o que precisamos neste momento.</p> \\[ y_{next} = y + speed \\times direction \\] <p>Assim, o pr\u00f3ximo valor de y \u00e9 resultado da soma entre o valor atual de y e a multiplica\u00e7\u00e3o entre velocidade e dire\u00e7\u00e3o. Se essa parcela da soma que envolve a velocidade e a dire\u00e7\u00e3o for positiva, o pr\u00f3ximo valor de y tamb\u00e9m ser\u00e1 e, assim, o c\u00edrculo se mover\u00e1 para baixo. Caso contr\u00e1rio, se a parcela for negativa, o c\u00edrculo se mover\u00e1 para cima.</p> <p>Por fim, a detec\u00e7\u00e3o e o tratamento de colis\u00e3o passa por uma altera\u00e7\u00e3o para que o c\u00edrculo, ao colidir com a parte inferior do canvas, mova-se para cima e, ao colidir com a parte superior do canvas, mova-se para baixo. A invers\u00e3o a dire\u00e7\u00e3o \u00e9 justamente o que ocorre se houver uma colis\u00e3o, determinada pelo condicional a seguir.</p> <pre><code>if (nextcy + r &gt; height || nextcy - r &lt; 0) {\n  direction = -direction;\n}\n</code></pre> <p>Assim, o framework de anima\u00e7\u00e3o de movimento passa por uma \u00faltima atualiza\u00e7\u00e3o nesta se\u00e7\u00e3o do livro:</p> <ol> <li>desenhar;</li> <li>calcular a pr\u00f3xima posi\u00e7\u00e3o com base na velocidade e dire\u00e7\u00e3o;</li> <li>detectar colis\u00e3o;<ol> <li>se n\u00e3o tiver colis\u00e3o, atualizar a posi\u00e7\u00e3o;</li> <li>se tiver colis\u00e3o, alternar a dire\u00e7\u00e3o;</li> </ol> </li> <li>repetir.</li> </ol> <p>Essa \u00e9 a l\u00f3gica para o funcionamento de uma anima\u00e7\u00e3o de movimento de um c\u00edrculo se movendo para cima e para baixo dentro do canvas.</p>"},{"location":"3-synthesis/processing/","title":"Processing","text":""},{"location":"3-synthesis/processing/#processing","title":"Processing","text":"<p>Note</p> <p>O conte\u00fado desta p\u00e1gina \u00e9 baseado no artigo \"A modern prometheus\", da Processing Foundation.</p>"},{"location":"3-synthesis/processing/#origens","title":"Origens","text":"<p>Processing foi desenvolvido em 2001, por Casey Reas e Ben Fry, com inspira\u00e7\u00e3o em experi\u00eancias interativas do MIT Media Lab e do Asthetics and Computation Group de Jonh Maeda.</p> <p>As metas iniciais eram:</p> <ul> <li>Unir design gr\u00e1fico e ci\u00eancia da computa\u00e7\u00e3o.</li> <li>Popularizar o conceito de \"sketching with code\" (esbo\u00e7ar ideias programando).</li> <li>Ensinar programa\u00e7\u00e3o para designers e artistas de forma acess\u00edvel.</li> </ul>"},{"location":"3-synthesis/processing/#estrutura-do-projeto","title":"Estrutura do projeto","text":"<p>A estrutura do Processing, n\u00e3o como recurso de programa\u00e7\u00e3o, mas como projeto de forma mais abrangente, \u00e9 baseada em tr\u00eas pilares:</p> <ul> <li>Linguagem: baseada em Java, com comandos simplificados para criar formas, cores, anima\u00e7\u00f5es e interatividade.</li> <li>Ambiente (PDE): editor pr\u00f3prio que funciona como um \"caderno de esbo\u00e7os\" para c\u00f3digo (da\u00ed o termo sketch).</li> <li>Comunidade: cultura de compartilhamento aberto de c\u00f3digo e aprendizado coletivo.</li> </ul>"},{"location":"3-synthesis/processing/#crescimento-e-impacto","title":"Crescimento e impacto","text":"<ul> <li>Come\u00e7ou como Proce55ing e passou por diferentes vers\u00f5es, alcan\u00e7ando uso mundial.</li> <li>Tornou-se ferramenta popular em arte digital, ensino de programa\u00e7\u00e3o, design interativo e pesquisa.</li> <li>Expans\u00e3o para bibliotecas, uso no ensino m\u00e9dio, universidades e projetos sociais.</li> <li>Vers\u00f5es para outras plataformas:<ul> <li>p5.js (JavaScript)</li> <li>Processing.py (Python)</li> <li>Android</li> <li>Raspberry Pi</li> </ul> </li> </ul>"},{"location":"3-synthesis/randomness/","title":"Aleatoriedade","text":""},{"location":"3-synthesis/randomness/#aleatoriedade","title":"Aleatoriedade","text":"<p>A aleatoriedade faz parte diversos processos computacionais e \u00e9 um recurso chave para a representa\u00e7\u00e3o ou cria\u00e7\u00e3o de modelos de processos complexos da natureza, por exemplo.</p> <p>A aleatoriedade poderia ser utilizada, por exemplo, para determinar a movimenta\u00e7\u00e3o de um personagem de um jogo, utilizando quatro dire\u00e7\u00f5es (norte, sul, leste, oeste) e escolhendo aleatoriamente a pr\u00f3xima dire\u00e7\u00e3o.</p> <p>As dire\u00e7\u00f5es podem ser representadas no contexto das coordenadas cartesianas 2D da computa\u00e7\u00e3o gr\u00e1fica, como ilustra a figura a seguir.</p> <p></p> <p>A figura indica que o movimento na dire\u00e7\u00e3o Norte representa um decremento na coordenada y (<code>y--</code>), enquanto um movimento na dire\u00e7\u00e3o Leste indica um incremento na coordenada x (<code>x++</code>).</p> <p>A partir disso, e reunindo os conceitos, podemos utilizar a fun\u00e7\u00e3o <code>random()</code> com o par\u00e2metro \\(4\\) para retornar um n\u00famero aleat\u00f3rio entre \\(0\\) e \\(4-1\\) e utiliz\u00e1-lo em um condicional para realizar opera\u00e7\u00f5es nas coordenadas x e y para criar um desenho que simula uma caminhada aleat\u00f3ria.</p> <p>Uma parte importante do sketch respons\u00e1vel por gerar esse comportamento \u00e9 definida pela classe <code>Walker</code>.</p> <pre><code>class Walker {\n  constructor() {\n    this.x = width / 2;\n    this.y = height / 2;\n  }\n\n  show() {\n    stroke(0);\n    point(this.x, this.y);\n  }\n\n  step() {\n    const choice = floor(random(4));\n    if (choice == 0) {\n      this.x++;\n    } else if (choice == 1) {\n      this.x--;\n    } else if (choice == 2) {\n      this.y++;\n    } else {\n      this.y--;\n    }\n  }\n}\n</code></pre> <p>Tr\u00eas partes importantes deste c\u00f3digo envolvem:</p> <ol> <li>m\u00e9todo <code>constructor()</code>: come\u00e7a a desenhar a partir do centro do canvas;</li> <li>m\u00e9todo <code>show()</code>: define a cor do desenho e desenha um ponto na coordenada (x,y) atual;</li> <li>m\u00e9todo <code>step()</code>: determina a dire\u00e7\u00e3o aleatoriamente e transforma a coordenada x ou y correspondente.</li> </ol> <p>Assim, \u00e9 poss\u00edvel criar um objeto da classe <code>Walker</code> no sketch.</p> <pre><code>let walker;\n\nfunction setup() {\n  createCanvas(640, 240);\n  walker = new Walker();\n  background(255);\n}\n\nfunction draw() {\n  walker.step();\n  walker.show();\n}\n</code></pre> <p>As fun\u00e7\u00f5es <code>setup()</code> e <code>draw()</code> s\u00e3o usadas, respectivamente, para:</p> <ol> <li><code>setup()</code><ul> <li>inicializar o canvas (aqui com dimens\u00e3o \\(640 \\times 240\\) pixels);</li> <li>criar uma inst\u00e2ncia da classe <code>Walker</code>;</li> <li>definir a cor de fundo do canvas (aqui, a cor branca);</li> </ul> </li> <li><code>draw()</code><ul> <li>chamar o m\u00e9todo <code>step()</code> do objeto <code>walker</code> para determinar a pr\u00f3xima posi\u00e7\u00e3o do ponto que vai ser desenhado; e</li> <li>chamar o m\u00e9todo <code>show()</code> do objeto <code>walker</code> para desenhar o ponto na nova posi\u00e7\u00e3o.</li> </ul> </li> </ol> <p>O resultado disso pode gerar resultados bastante interessantes ou assustadores, at\u00e9.</p> <p>Perceba tamb\u00e9m que o comportamento aleat\u00f3rio determinado pela fun\u00e7\u00e3o <code>random()</code> \u00e9 determinado por uma distribui\u00e7\u00e3o uniforme, ou seja, cada poss\u00edvel n\u00famero (0 a 3) tem a mesma chance de ser escolhido.</p> <p>Note</p> <p>Como voc\u00ea poderia criar uma varia\u00e7\u00e3o deste sketch para que a caminhada n\u00e3o fosse totalmente aleat\u00f3ria, mas um pouco enviesada para uma determinada dire\u00e7\u00e3o?</p>"},{"location":"3-synthesis/randomness/#ruido-de-perlin","title":"Ru\u00eddo de Perlin","text":"<p>Os geradores de n\u00fameros aleat\u00f3rios t\u00eam a caracter\u00edstica de gerar n\u00fameros bastante distintos entre uma gera\u00e7\u00e3o e a pr\u00f3xima. Embora isso possa ser desej\u00e1vel em v\u00e1rias situa\u00e7\u00f5es, a simula\u00e7\u00e3o de comportamentos mais org\u00e2nicos e de fen\u00f4menos naturais poderiam se beneficiar de uma certa suavidade ou com um menor n\u00edvel de distin\u00e7\u00e3o entre os n\u00fameros gerados em sequ\u00eancia.</p> <p>Uma forma de fazer isso \u00e9 utilizar o ru\u00eddo de Perlin, um m\u00e9todo para gera\u00e7\u00e3o de ru\u00eddos criado por Ken Perlin na d\u00e9cada de 1990.</p> <p>Note</p> <p>Curiosamente, o trabalho de Ken Perlin, aplicado \u00e0 area do entretenimento, gerou uma contribui\u00e7\u00e3o significativa na \u00e1rea de efeitos especiais, principalmente por causa da gera\u00e7\u00e3o procedural. </p> <p>Quer ver um pouco mais sobre isso? Assista a \"O algoritmo que ganhou um Oscar!\".</p> <p>Se quiser entender mais da matem\u00e1tica e dos conceitos fundamentais de forma detalhada, recomendo a leitura do artigo original: </p> <p>Perlin, K. (1985). An image synthesizer. ACM SIGGRAPH Computer Graphics, 19(3), 287\u2013296. https://doi.org/10.1145/325165.325247</p> <p>Acompanhe tamb\u00e9m a \u00f3tima explica\u00e7\u00e3o do Raouf Touti no post \"Perlin Noise: A Procedural Generation Algorithm\".</p> <p>Para ilustrar essa caracter\u00edstica, considere os exemplos a seguir.</p> <p>O sketch da esquerda utiliza a fun\u00e7\u00e3o <code>random()</code>, enquanto o da direita utiliza a fun\u00e7\u00e3o <code>noise()</code>. Perceba que h\u00e1 uma grande diferen\u00e7a na forma como os valores aleat\u00f3rios s\u00e3o utilizados para gerar a silhueta de uma esp\u00e9cie de superf\u00edcie montanhosa.</p>"},{"location":"3-synthesis/randomness/#melhorando-o-walker","title":"Melhorando o Walker","text":"<p>Na demonstra\u00e7\u00e3o a seguir, o random walker da esquerda est\u00e1 utilizando a fun\u00e7\u00e3o <code>random()</code>, enquanto o da direita utiliza a fun\u00e7\u00e3o <code>noise()</code>.</p> <p>O c\u00f3digo do sketch a seguir ilustra a utiliza\u00e7\u00e3o da fun\u00e7\u00e3o <code>noise()</code>.</p> <pre><code>var d = 24;\nvar inc = 0.01;\nvar off1 = 0;\nvar off2 = 10000;\n\nfunction setup() {\n  createCanvas(400, 240);\n}\n\nfunction draw() {\n  background(255);\n  fill(55);\n\n  var x = map(noise(off1), 0, 1, 0, width);\n  var y = map(noise(off2), 0, 1, 0, height);\n\n  off1 += inc;\n  off2 += inc;\n\n  ellipse(x, y, d, d);\n\n}\n</code></pre> <p>A fun\u00e7\u00e3o <code>noise()</code> retorna o mesmo valor para o mesmo par\u00e2metro, o que significa que precisamos passar um par\u00e2metro que tenha algum incremento e, por isso, o c\u00f3digo utiliza vari\u00e1vel <code>inc</code> para determinar o incremento e as vari\u00e1veis <code>off1</code> e <code>off2</code> para serem alteradas a cada instante.</p> <p>A fun\u00e7\u00e3o <code>map()</code> \u00e9 utilizada para garantir que os novos valores de coordenadas do centro da elipse estejam entre 0 e width e entre 0 e height, respectivamente.</p>"},{"location":"3-synthesis/randomness/#ruido-de-perlin-em-2d-e-3d","title":"Ru\u00eddo de Perlin em 2D e 3D","text":"<p>A chamada da fun\u00e7\u00e3o <code>noise()</code> com um par\u00e2metro calcula um valor em 1D, mas com dois par\u00e2metros, calcula um valor em 2D. Os par\u00e2metros podem indicar espa\u00e7o (com coordenadas (x,y)) ou espa\u00e7o e tempo (com coordenadas (x,t), por exemplo).</p> <p>Os sketches a seguir demonstram a simula\u00e7\u00e3o de um ru\u00eddo em duas dimens\u00f5es. O sketch da esquerda se assemelha ao ru\u00eddo de uma TV (daquelas mais antigas) quando ocorria aus\u00eancia ou diminui\u00e7\u00e3o significativa do sinal de transmiss\u00e3o do canal sintonizado.</p> <p>Para fazer o sketch da esquerda utilizamos a fun\u00e7\u00e3o <code>random()</code> mas tamb\u00e9m, neste caso, estamos manipulando os pixels do canvas, ent\u00e3o \u00e9 necess\u00e1rio um tratamento diferenciado, utilizando a fun\u00e7\u00e3o <code>set()</code> para determinar o valor do pixel nas coordenadas <code>(x,y)</code>.</p> <pre><code>function draw() {\n  loadPixels();\n  for (let x = 0; x &lt; width; x++) {\n    for (let y = 0; y &lt; height; y++) {\n      let bright = random(255);\n      set(x, y, bright);\n    }\n  }\n  updatePixels();\n  noLoop();\n}\n</code></pre> <p>J\u00e1 o sketch da direita utiliza a fun\u00e7\u00e3o <code>noise()</code> para duas dimens\u00f5es. </p> <pre><code>function draw() {\n  loadPixels();\n\n  var xoff = 0.0;\n  for (let x = 0; x &lt; width; x++) {\n    var yoff = 0.0;\n    for (let y = 0; y &lt; height; y++) {\n      let bright = map(noise(xoff, yoff), 0, 1, 0, 255);\n      set(x, y, bright);\n      yoff += inc;\n    }\n    xoff += inc;\n  }\n\n  updatePixels();\n\n}\n</code></pre> <p>De fato, h\u00e1 mais uma forma de utilizar a fun\u00e7\u00e3o <code>noise()</code>, que \u00e9 passando tr\u00eas par\u00e2metros. Nesse caso, isso \u00e9 utilizado para representar coordenadas espaciais (x,y,z) ou espaciais em 2D mais o tempo (x,y,t).</p> <p>O resultado \u00e9 o sketch a seguir, que cria uma esp\u00e9cie de simula\u00e7\u00e3o de c\u00e9u nublado em movimento.</p>"},{"location":"3-synthesis/transformations/","title":"Introdu\u00e7\u00e3o","text":""},{"location":"3-synthesis/transformations/#transformacoes-2d","title":"Transforma\u00e7\u00f5es 2D","text":"<p>As transforma\u00e7\u00f5es 2D s\u00e3o opera\u00e7\u00f5es que alteram a posi\u00e7\u00e3o, orienta\u00e7\u00e3o ou tamanho de objetos em um espa\u00e7o bidimensional. As principais transforma\u00e7\u00f5es 2D s\u00e3o: transla\u00e7\u00e3o, rota\u00e7\u00e3o e escala. Essas transforma\u00e7\u00f5es s\u00e3o fundamentais em computa\u00e7\u00e3o gr\u00e1fica e s\u00e3o amplamente utilizadas em bibliotecas como p5.js para manipular gr\u00e1ficos e criar anima\u00e7\u00f5es.</p> <p>Embora possa parecer que as transforma\u00e7\u00f5es alteram diretamente os objetos, na verdade elas modificam o sistema de coordenadas no qual os objetos s\u00e3o desenhados. Isso significa que, ao aplicar uma transforma\u00e7\u00e3o, voc\u00ea est\u00e1 mudando a forma como o sistema de coordenadas interpreta as posi\u00e7\u00f5es dos objetos, e n\u00e3o os objetos em si.</p> <p>Cada transforma\u00e7\u00e3o pode ser representada por uma matriz, e a combina\u00e7\u00e3o de m\u00faltiplas transforma\u00e7\u00f5es pode ser realizada atrav\u00e9s da multiplica\u00e7\u00e3o dessas matrizes. A ordem das transforma\u00e7\u00f5es \u00e9 crucial, pois elas s\u00e3o aplicadas sequencialmente, e diferentes ordens podem resultar em efeitos visuais distintos.</p>"},{"location":"3-synthesis/transformations/combined/","title":"Combina\u00e7\u00e3o de transforma\u00e7\u00f5es","text":""},{"location":"3-synthesis/transformations/combined/#combinacao-de-transformacoes","title":"Combina\u00e7\u00e3o de transforma\u00e7\u00f5es","text":"<p>As transforma\u00e7\u00f5es podem ser combinadas para criar efeitos mais complexos. A ordem das transforma\u00e7\u00f5es \u00e9 crucial, pois elas s\u00e3o aplicadas sequencialmente. Por exemplo, considere o seguinte sketch que combina transla\u00e7\u00e3o, rota\u00e7\u00e3o e escala para desenhar v\u00e1rias casas em diferentes posi\u00e7\u00f5es.</p> <p>O c\u00f3digo define a classe <code>House</code>, que possui um m\u00e9todo <code>display()</code> respons\u00e1vel por desenhar a casa na posi\u00e7\u00e3o <code>(0, 0)</code> ap\u00f3s aplicar as transforma\u00e7\u00f5es de transla\u00e7\u00e3o, rota\u00e7\u00e3o e escala.</p> <pre><code>class House {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    display() {\n        push();\n\n        translate(this.x, this.y); // (1)!\n        rotate(PI / 4); // (2)! \n        scale(1.5, 0.5); // (3)!\n\n        triangle(15, 0, 0, 15, 30, 15);\n        rect(0, 15, 30, 30);\n        rect(12, 30, 10, 15);\n\n        pop();\n    }\n}\n\nhouses = [];\nconst HOUSE_STEP = 70;\n\nfunction setup() {\n    createCanvas(600, 200);\n    const houseY = height / 2 - 30;\n\n    for (let i = 50; i &lt; width; i += HOUSE_STEP) {\n        houses.push(new House(i, houseY));\n    }\n\n}\nfunction draw() {\n    background(255);\n    houses.forEach((house, index) =&gt; {\n        house.display();\n    });\n}\n</code></pre> <ol> <li>Transla\u00e7\u00e3o do sistema de coordenadas para a posi\u00e7\u00e3o da casa, na coordenada <code>(x, y)</code>.</li> <li>Rota\u00e7\u00e3o do sistema de coordenadas em torno da origem em \\( 45^\\circ \\).</li> <li>Escala do sistema de coordenadas (1.5x em x e 0.5x em y).</li> </ol> <p>O m\u00e9todo <code>display()</code> da classe <code>House</code> aplica as transforma\u00e7\u00f5es na seguinte ordem:</p> <ol> <li>Transla\u00e7\u00e3o para a posi\u00e7\u00e3o da casa.</li> <li>Rota\u00e7\u00e3o de \\( 45^\\circ \\).</li> <li>Escala de \\( 1.5 \\) na dire\u00e7\u00e3o x e \\( 0.5 \\) na dire\u00e7\u00e3o y.</li> </ol> <p>Essas transforma\u00e7\u00f5es s\u00e3o aplicadas entre <code>push()</code> e <code>pop()</code>, garantindo que o estado do sistema de coordenadas seja restaurado ap\u00f3s desenhar cada casa. Isso permite que cada casa seja desenhada de forma independente, sem interferir nas outras.</p>"},{"location":"3-synthesis/transformations/rotation/","title":"Rota\u00e7\u00e3o","text":""},{"location":"3-synthesis/transformations/rotation/#rotacao","title":"Rota\u00e7\u00e3o","text":"<p>A rota\u00e7\u00e3o \u00e9 uma transforma\u00e7\u00e3o que gira um objeto em torno de um ponto fixo, conhecido como centro de rota\u00e7\u00e3o. Em termos de vetores, a rota\u00e7\u00e3o de um ponto \\( P(x, y) \\) em torno da origem por um \u00e2ngulo \\( \\theta \\) resulta em um novo ponto \\( P'(x', y') \\), onde:</p> \\[ \\begin{align*} x' &amp;= x \\cdot \\cos(\\theta) - y \\cdot \\sin(\\theta) \\\\ y' &amp;= x \\cdot \\sin(\\theta) + y \\cdot \\cos(\\theta) \\end{align*} \\] <p>ou</p> \\[ \\begin{align} P' = R(\\theta) \\cdot P \\end{align} \\] <p>onde \\( R(\\theta) \\) \u00e9 a matriz de rota\u00e7\u00e3o:</p> \\[ R(\\theta) = \\begin{bmatrix} \\cos(\\theta) &amp; -\\sin(\\theta) \\\\ \\sin(\\theta) &amp; \\cos(\\theta) \\end{bmatrix} \\] <p>A matriz de rota\u00e7\u00e3o tamb\u00e9m pode ser representada utilizando a matriz homog\u00eanea 3x3:</p> \\[ R(\\theta) = \\begin{bmatrix} \\cos(\\theta) &amp; -\\sin(\\theta) &amp; 0 \\\\ \\sin(\\theta) &amp; \\cos(\\theta) &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] <p>Considere a figura a seguir, que desenha um ret\u00e2ngulo e depois o gira em torno da origem do sistema de coordenadas.</p> Figura: Ilustra\u00e7\u00e3o da rota\u00e7\u00e3o de um objeto no espa\u00e7o 2D <p>Podemos afirmar que o ret\u00e2ngulo foi rotacionado por um \u00e2ngulo \\( \\theta = 45^\\circ \\) (ou \\( \\frac{\\pi}{4} \\) radianos). Note que a rota\u00e7\u00e3o altera a orienta\u00e7\u00e3o do ret\u00e2ngulo em rela\u00e7\u00e3o \u00e0 sua posi\u00e7\u00e3o original. Uma quest\u00e3o com a rota\u00e7\u00e3o \u00e9 o ponto em torno do qual o objeto gira. No exemplo acima, o ret\u00e2ngulo gira em torno da origem <code>(0,0)</code>, o que pode n\u00e3o ser o comportamento desejado. Para girar o ret\u00e2ngulo em torno de seu canto superior direito \u2014 que est\u00e1 em <code>(40, 40)</code> \u2014 precisamos seguir os passos:</p> <ol> <li>transladar o sistema de coordenadas para o ponto <code>(40, 40)</code>;</li> <li>aplicar a rota\u00e7\u00e3o;</li> <li>desenhar o ret\u00e2ngulo na posi\u00e7\u00e3o <code>(0, 0)</code>.</li> </ol> Figura: Ilustra\u00e7\u00e3o da rota\u00e7\u00e3o de um objeto no espa\u00e7o 2D alterando a origem do sistema de coordenadas <p>Em p5.js, podemos aplicar uma rota\u00e7\u00e3o usando a fun\u00e7\u00e3o <code>rotate(angle)</code> entre <code>push()</code> e <code>pop()</code>, como no exemplo a seguir. Importante lembrar que <code>angle</code> deve estar em radianos. Para converter graus em radianos, podemos usar a fun\u00e7\u00e3o <code>radians(degrees)</code>.</p> <pre><code>function setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(255);\n  push();\n  translate(width / 2, height / 2);\n  rotate(PI / 4);\n  rectMode(CENTER);\n  rect(0, 0, 100, 100);\n  pop();\n}\n</code></pre> <p>Neste exemplo, o ret\u00e2ngulo \u00e9 desenhado no centro do canvas e rotacionado em \\( 45^\\circ \\). A fun\u00e7\u00e3o <code>push()</code> salva o estado atual do sistema de coordenadas, e a fun\u00e7\u00e3o <code>pop()</code> restaura o estado salvo, garantindo que a rota\u00e7\u00e3o n\u00e3o afete outras partes do desenho.</p> <p>A fun\u00e7\u00e3o <code>rectMode(CENTER)</code> \u00e9 usada para desenhar o ret\u00e2ngulo a partir do seu centro, facilitando a visualiza\u00e7\u00e3o da rota\u00e7\u00e3o em torno do ponto central.</p>"},{"location":"3-synthesis/transformations/scaling/","title":"Escala","text":""},{"location":"3-synthesis/transformations/scaling/#escala","title":"Escala","text":"<p>A escala \u00e9 uma transforma\u00e7\u00e3o que altera o tamanho de um objeto \u2014 ao alterar o tamanho do sistema de coordenadas \u2014 em rela\u00e7\u00e3o a um ponto fixo, conhecido como centro de escala. Em termos de vetores, a escala de um ponto \\( P(x, y) \\) por fatores \\( s_x \\) e \\( s_y \\) resulta em um novo ponto \\( P'(x', y') \\), onde:</p> \\[ \\begin{align*} x' &amp;= x \\cdot s_x \\\\ y' &amp;= y \\cdot s_y \\end{align*} \\] <p>ou</p> \\[ \\begin{align} P' = S(s_x, s_y) \\cdot P \\end{align} \\] <p>onde \\( S(s_x, s_y) \\) \u00e9 a matriz de escala:</p> \\[ S(s_x, s_y) = \\begin{bmatrix} s_x &amp; 0 \\\\ 0 &amp; s_y \\end{bmatrix}    \\] <p>A matriz de escala tamb\u00e9m pode ser representada utilizando a matriz homog\u00eanea 3x3:</p> \\[ S(s_x, s_y) = \\begin{bmatrix} s_x &amp; 0 &amp; 0 \\\\ 0 &amp; s_y &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] <p>O sketch a seguir ilustra a aplica\u00e7\u00e3o da escala em p5.js, usando a fun\u00e7\u00e3o <code>scale(sx, sy)</code> entre <code>push()</code> e <code>pop()</code>.</p> <pre><code>function setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(255);\n  push();\n  translate(width / 2, height / 2);\n  scale(1.5, 0.5);\n  rectMode(CENTER);\n  rect(0, 0, 100, 100);\n  pop();\n}\n</code></pre> <p>Neste exemplo, o ret\u00e2ngulo \u00e9 desenhado no centro do canvas e escalado em \\( 1.5 \\) vezes na dire\u00e7\u00e3o x e \\( 0.5 \\) vezes na dire\u00e7\u00e3o y. A fun\u00e7\u00e3o <code>push()</code> salva o estado atual do sistema de coordenadas, e a fun\u00e7\u00e3o <code>pop()</code> restaura o estado salvo, garantindo que a escala n\u00e3o afete outras partes do desenho.</p>"},{"location":"3-synthesis/transformations/transformation-matrix/","title":"Matriz de transforma\u00e7\u00e3o 2D","text":""},{"location":"3-synthesis/transformations/transformation-matrix/#matriz-de-transformacao","title":"Matriz de transforma\u00e7\u00e3o","text":"<p>As transforma\u00e7\u00f5es 2D podem ser representadas por matrizes, o que permite combinar m\u00faltiplas transforma\u00e7\u00f5es atrav\u00e9s de multiplica\u00e7\u00f5es delas. A ordem das transforma\u00e7\u00f5es \u00e9 fundamental, pois elas s\u00e3o aplicadas sequencialmente, e diferentes ordens podem resultar em efeitos visuais distintos.</p> <p>Cada vez que uma das fun\u00e7\u00f5es <code>translate()</code>, <code>rotate()</code> ou <code>scale()</code> \u00e9 chamada em p5.js, a matriz de transforma\u00e7\u00e3o atual \u00e9 atualizada multiplicando-a pela matriz correspondente \u00e0 transforma\u00e7\u00e3o aplicada. A matriz de transforma\u00e7\u00e3o inicial \u00e9 a matriz identidade, que n\u00e3o altera as coordenadas dos pontos.</p> <p>Matriz identidade \u00e9 definida por: </p> \\[ I = \\begin{bmatrix} 1 &amp; 0 &amp; 0 \\\\ 0 &amp; 1 &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] <p>No contexto das transforma\u00e7\u00f5es 2D, a multiplica\u00e7\u00e3o de matrizes permite combinar v\u00e1rias transforma\u00e7\u00f5es em uma \u00fanica matriz de transforma\u00e7\u00e3o composta. Por exemplo, se aplicarmos uma transla\u00e7\u00e3o seguida de uma rota\u00e7\u00e3o, a matriz de transforma\u00e7\u00e3o resultante ser\u00e1 o produto da matriz de rota\u00e7\u00e3o pela matriz de transla\u00e7\u00e3o:</p> \\[ M = R(\\theta) \\cdot T(t_x, t_y) \\] <p>onde \\( M \\) \u00e9 a matriz de transforma\u00e7\u00e3o composta, \\( R(\\theta) \\) \u00e9 a matriz de rota\u00e7\u00e3o e \\( T(t_x, t_y) \\) \u00e9 a matriz de transla\u00e7\u00e3o. </p> <p>Com matrizes homog\u00eaneas, todas as transforma\u00e7\u00f5es podem ser representadas como matrizes 3x3, permitindo a combina\u00e7\u00e3o de transla\u00e7\u00f5es, rota\u00e7\u00f5es e escalas em uma \u00fanica opera\u00e7\u00e3o de multiplica\u00e7\u00e3o de matrizes.</p> <p>As matrizes homog\u00eaneas para as transforma\u00e7\u00f5es b\u00e1sicas s\u00e3o:</p> <ul> <li>Transla\u00e7\u00e3o:</li> </ul> \\[ T(t_x, t_y) = \\begin{bmatrix} 1 &amp; 0 &amp; t_x \\\\ 0 &amp; 1 &amp; t_y \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] <ul> <li>Rota\u00e7\u00e3o:</li> </ul> \\[ R(\\theta) = \\begin{bmatrix} \\cos(\\theta) &amp; -\\sin(\\theta) &amp; 0 \\\\ \\sin(\\theta) &amp; \\cos(\\theta) &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] <ul> <li>Escala:</li> </ul> \\[ S(s_x, s_y) = \\begin{bmatrix} s_x &amp; 0 &amp; 0 \\\\ 0 &amp; s_y &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] <p>Exemplos num\u00e9ricos de multiplica\u00e7\u00e3o de matrizes para combina\u00e7\u00f5es comuns de transforma\u00e7\u00f5es:</p> <ul> <li>Transla\u00e7\u00e3o seguida de rota\u00e7\u00e3o:</li> </ul> \\[ M = R(\\theta) \\cdot T(t_x, t_y) = \\begin{bmatrix} \\cos(\\theta) &amp; -\\sin(\\theta) &amp; t_x \\\\ \\sin(\\theta) &amp; \\cos(\\theta) &amp; t_y \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] <ul> <li>Rota\u00e7\u00e3o seguida de transla\u00e7\u00e3o:</li> </ul> \\[ M = T(t_x, t_y) \\cdot R(\\theta) = \\begin{bmatrix} \\cos(\\theta) &amp; -\\sin(\\theta) &amp; t_x \\\\ \\sin(\\theta) &amp; \\cos(\\theta) &amp; t_y \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] <ul> <li>Escala seguida de rota\u00e7\u00e3o:</li> </ul> \\[ M = R(\\theta) \\cdot S(s_x, s_y) = \\begin{bmatrix} s_x \\cdot \\cos(\\theta) &amp; -s_y \\cdot \\sin(\\theta) &amp; 0 \\\\ s_x \\cdot \\sin(\\theta) &amp; s_y \\cdot \\cos(\\theta) &amp; 0 \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] <p>A multiplica\u00e7\u00e3o de matrizes n\u00e3o \u00e9 comutativa, ou seja, \\( A \\cdot B \\neq B \\cdot A \\). Portanto, aplicar uma transla\u00e7\u00e3o seguida de uma rota\u00e7\u00e3o geralmente produz um resultado diferente de aplicar uma rota\u00e7\u00e3o seguida de uma transla\u00e7\u00e3o.</p> <p>Como s\u00e3o matrizes pequenas, mesmo que voc\u00ea precise implementar a multiplica\u00e7\u00e3o de matrizes manualmente, o processo \u00e9 simples. Abaixo est\u00e1 um exemplo de c\u00f3digo em JavaScript que multiplica duas matrizes sem utilizar la\u00e7os de repeti\u00e7\u00e3o (como convencionalmente \u00e9 implementada a multiplica\u00e7\u00e3o de matrizes):</p> <pre><code>function multiplyMatrices(A, B) {\n    const m00 = A[0][0] * B[0][0] + A[0][1] * B[1][0] + A[0][2] * B[2][0];\n    const m01 = A[0][0] * B[0][1] + A[0][1] * B[1][1] + A[0][2] * B[2][1];\n    const m02 = A[0][0] * B[0][2] + A[0][1] * B[1][2] + A[0][2] * B[2][2];\n    const m10 = A[1][0] * B[0][0] + A[1][1] * B[1][0] + A[1][2] * B[2][0];\n    const m11 = A[1][0] * B[0][1] + A[1][1] * B[1][1] + A[1][2] * B[2][1];\n    const m12 = A[1][0] * B[0][2] + A[1][1] * B[1][2] + A[1][2] * B[2][2];\n    const m20 = A[2][0] * B[0][0] + A[2][1] * B[1][0] + A[2][2] * B[2][0];\n    const m21 = A[2][0] * B[0][1] + A[2][1] * B[1][1] + A[2][2] * B[2][1];\n    const m22 = A[2][0] * B[0][2] + A[2][1] * B[1][2] + A[2][2] * B[2][2];\n\n    return [\n        [ m00, m01, m02 ],\n        [ m10, m11, m12 ],\n        [ m20, m21, m22 ]\n    ];\n}\n</code></pre> <p>A seguir, um trecho de c\u00f3digo que demonstra como utilizar a fun\u00e7\u00e3o <code>multiplyMatrices</code> para combinar uma transla\u00e7\u00e3o e uma rota\u00e7\u00e3o:</p> <pre><code>// Definindo uma transla\u00e7\u00e3o de (100, 50)\nconst translationMatrix = [\n    [1, 0, 100],\n    [0, 1, 50],\n    [0, 0, 1]\n];\n\n// Definindo uma rota\u00e7\u00e3o de 45 graus (\u03c0/4 radianos)\nconst angle = Math.PI / 4;\nconst rotationMatrix = [\n    [Math.cos(angle), -Math.sin(angle), 0],\n    [Math.sin(angle), Math.cos(angle), 0],\n    [0, 0, 1]\n];\n\n// Multiplicando a matriz de rota\u00e7\u00e3o pela matriz de transla\u00e7\u00e3o\nconst combinedMatrix = multiplyMatrices(rotationMatrix, translationMatrix);\nconsole.log(combinedMatrix);\n</code></pre> <p>Felizmente, com a p5.js voc\u00ea n\u00e3o precisa se preocupar com a implementa\u00e7\u00e3o da multiplica\u00e7\u00e3o de matrizes, pois a biblioteca j\u00e1 faz isso para voc\u00ea. Basta chamar as fun\u00e7\u00f5es <code>translate()</code>, <code>rotate()</code> e <code>scale()</code> na ordem desejada, e a p5.js cuidar\u00e1 da multiplica\u00e7\u00e3o das matrizes de transforma\u00e7\u00e3o internamente.</p> <p>Na p5.js as fun\u00e7\u00f5es <code>push()</code> e <code>pop()</code> s\u00e3o usadas para salvar e restaurar o estado da matriz de transforma\u00e7\u00e3o. Isso \u00e9 \u00fatil quando queremos aplicar transforma\u00e7\u00f5es tempor\u00e1rias a um objeto sem afetar outros objetos desenhados posteriormente.</p>"},{"location":"3-synthesis/transformations/translation/","title":"Transla\u00e7\u00e3o","text":""},{"location":"3-synthesis/transformations/translation/#translacao","title":"Transla\u00e7\u00e3o","text":"<p>O canvas \u00e9 como um papel gr\u00e1fico ou um plano de coordenadas. A origem <code>(0,0)</code> est\u00e1 no canto superior esquerdo e os valores de <code>x</code> crescem para a direita e os valores de <code>y</code> crescem para baixo.</p> <p>A transla\u00e7\u00e3o \u00e9 uma transforma\u00e7\u00e3o que move um objeto de um lugar para outro no espa\u00e7o 2D. Em termos de vetores, a transla\u00e7\u00e3o de um ponto \\( P(x, y) \\) por um vetor \\( \\vec{t}(t_x, t_y) \\) resulta em um novo ponto \\( P'(x', y') \\), onde:</p> \\[ \\begin{align*} x' &amp;= x + t_x \\\\ y' &amp;= y + t_y \\end{align*} \\] <p>ou</p> \\[ \\begin{align} P' = P + \\vec{t} \\end{align} \\] <p>A matriz de transla\u00e7\u00e3o n\u00e3o \u00e9 representada como uma matriz 2x2, como as outras transforma\u00e7\u00f5es, mas sim como uma matriz 3x3 em coordenadas homog\u00eaneas:</p> \\[ T = \\begin{bmatrix} 1 &amp; 0 &amp; t_x \\\\ 0 &amp; 1 &amp; t_y \\\\ 0 &amp; 0 &amp; 1 \\end{bmatrix} \\] <p>Assim, o ponto \\( P \\) em coordenadas homog\u00eaneas \u00e9 representado como:</p> \\[ P = \\begin{bmatrix} x \\\\ y \\\\ 1 \\end{bmatrix} \\] <p>E a transla\u00e7\u00e3o pode ser expressa como:</p> \\[ P' = T \\cdot P \\] <p>Na pr\u00e1tica, a transla\u00e7\u00e3o \u00e9 usada para alterar as coordenadas de um objeto, movendo-o para uma nova posi\u00e7\u00e3o no canvas. Considere a figura a seguir, que desenha um ret\u00e2ngulo na posi\u00e7\u00e3o <code>(20, 20)</code> e depois o move para <code>(80, 100)</code>.</p> Figura: Ilustra\u00e7\u00e3o da movimenta\u00e7\u00e3o de um objeto no espa\u00e7o 2D <p>Podemos afirmar que o ret\u00e2ngulo foi transladado pelo vetor \\( \\vec{t}(60, 80) \\), pois:</p> \\[ \\begin{align*} x' &amp;= 20 + 60 = 80 \\\\ y' &amp;= 20 + 80 = 100 \\end{align*} \\] <p>Entretanto, h\u00e1 uma forma mais adequada de fazer isso: mover o sistema de coordenadas. Se voc\u00ea mover o sistema de coordenadas para <code>(60, 80)</code>, ent\u00e3o desenhar o ret\u00e2ngulo na mesma posi\u00e7\u00e3o <code>(20, 20)</code>.</p> Figura: Ilustra\u00e7\u00e3o da transla\u00e7\u00e3o do sistema de coordenadas <p>Perceba que eu disse: mover o sistema de coordenadas, n\u00e3o mover o ret\u00e2ngulo. Aqui est\u00e1 uma diferen\u00e7a fundamental. Tente n\u00e3o se esquecer disso. Al\u00e9m disso, como a figura ilustra, a transla\u00e7\u00e3o altera a origem do sistema de coordenadas em rela\u00e7\u00e3o \u00e0 origem anterior, ou seja, \u00e9 como se houvessem duas camadas, uma sobre a outra: a camada original e a camada transladada. Assim, cada opera\u00e7\u00e3o sobre o sistema de coordenadas, gera uma nova camada (no topo) em rela\u00e7\u00e3o \u00e0 camada anterior.</p> <p>Por este motivo, transladar o sistema de coordenadas para <code>(60, 80)</code> considera a camada original, ou seja, a nova origem <code>(0,0)</code> est\u00e1 na posi\u00e7\u00e3o <code>(60, 80)</code> da camada original. Portanto, desenhar o ret\u00e2ngulo na posi\u00e7\u00e3o <code>(20, 20)</code> da camada transladada, resulta no mesmo efeito visual de desenh\u00e1-lo na posi\u00e7\u00e3o <code>(80, 100)</code> da camada original.</p> <p>Em p5.js, podemos aplicar uma transla\u00e7\u00e3o usando a fun\u00e7\u00e3o <code>translate(tx, ty)</code> entre <code>push()</code> e <code>pop()</code>, como no exemplo a seguir.</p> <pre><code>function setup() {\n  createCanvas(400, 400);\n}\n\nfunction draw() {\n  background(255);\n\n  push();\n  translate(60, 80);\n  rect(20, 20, 40, 40);\n  pop();\n}\n</code></pre> <p>Neste exemplo, o ret\u00e2ngulo \u00e9 desenhado na nova origem <code>(80, 100)</code>. A fun\u00e7\u00e3o <code>push()</code> salva o estado atual do sistema de coordenadas, e a fun\u00e7\u00e3o <code>pop()</code> restaura o estado salvo, garantindo que a transla\u00e7\u00e3o n\u00e3o afete outras partes do desenho.</p>"},{"location":"3-synthesis/transformations/translation/#qual-a-vantagem-disso","title":"Qual a vantagem disso?","text":"<p>Imagine criar um sketch que desenha um grupo de casas. O desenho de uma casa considera tr\u00eas objetos: um ret\u00e2ngulo (a casa), um tri\u00e2ngulo (o telhado) e um ret\u00e2ngulo menor (a porta). O c\u00f3digo para desenhar uma casa na posi\u00e7\u00e3o <code>(0, 0)</code> poderia ser algo assim:</p> <pre><code>// Desenha a casa\ntriangle(15, 0, 0, 15, 30, 15); // Corpo\nrect(0, 15, 30, 30); // Telhado\nrect(12, 30, 10, 15); // Porta\n</code></pre> <p>O desafio \u00e9 desenhar v\u00e1rias casas em diferentes posi\u00e7\u00f5es, ajustadas manualmente.</p> <p>Uma solu\u00e7\u00e3o mais vi\u00e1vel \u00e9 usar a transla\u00e7\u00e3o para mover o sistema de coordenadas para a posi\u00e7\u00e3o desejada antes de desenhar cada casa. O sketch a seguir ilustra essa abordagem, desenhando um grupo de casas em diferentes posi\u00e7\u00f5es.</p> <p>O sketch define a classe <code>House</code>, que possui um m\u00e9todo <code>display()</code> respons\u00e1vel por desenhar a casa na posi\u00e7\u00e3o <code>(0, 0)</code>. </p> <pre><code>class House {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    display() {\n        push();\n        translate(this.x, this.y);\n        // Desenha a casa\n        pop();\n    }\n}\n</code></pre> <p>O restante do sketch, principalmente na fun\u00e7\u00e3o <code>setup()</code>, cria v\u00e1rias inst\u00e2ncias da classe <code>House</code> em diferentes posi\u00e7\u00f5es  e as armazena em um array.  As posi\u00e7\u00f5es s\u00e3o definidas com base em um passo fixo (<code>HOUSE_STEP</code>), garantindo que as casas fiquem espa\u00e7adas uniformemente.</p> <pre><code>let houses = [];\nconst HOUSE_STEP = 70;\n\nfunction setup() {\n    createCanvas(600, 200);\n    const houseY = height / 2 - 30;\n\n    for (let i = 50; i &lt; width; i += HOUSE_STEP) {\n        houses.push(new House(i, houseY));\n    }\n\n}\n</code></pre> <p>Por fim, na fun\u00e7\u00e3o <code>draw()</code>, o m\u00e9todo <code>display()</code> de cada casa \u00e9 chamado para desenh\u00e1-las na tela.</p> <pre><code>function draw() {\n    background(255);\n\n    houses.forEach((house, index) =&gt; {\n        house.display();\n    });\n}\n</code></pre> <p>Portanto, a import\u00e2ncia da transla\u00e7\u00e3o se torna evidente quando consideramos a cria\u00e7\u00e3o de m\u00faltiplas inst\u00e2ncias de objetos que compartilham uma l\u00f3gica de desenho semelhante, mas precisam ser posicionados em locais diferentes na tela. Isso n\u00e3o apenas simplifica o c\u00f3digo, mas tamb\u00e9m o torna mais modular e f\u00e1cil de entender.</p>"},{"location":"3-synthesis/vectors/","title":"Vetores","text":""},{"location":"3-synthesis/vectors/#vetores","title":"Vetores","text":"<p>Vetores s\u00e3o fundamentais em simula\u00e7\u00f5es e computa\u00e7\u00e3o gr\u00e1fica, pois representam grandezas f\u00edsicas que possuem magnitude (tamanho) e dire\u00e7\u00e3o. Exemplos cl\u00e1ssicos incluem o movimento de uma esfera caindo, o giro de um planeta ao redor do sol, ou a dire\u00e7\u00e3o de uma for\u00e7a. Diferentemente de escalares (como massa ou temperatura, que t\u00eam apenas valor), vetores descrevem deslocamentos, velocidades, for\u00e7as e muitas outras grandezas essenciais para modelar o mundo f\u00edsico.</p> <p>Por exemplo, dizer que um carro se move a 60 km/h \u00e9 uma informa\u00e7\u00e3o incompleta (escalar). Dizer que se move a 60 km/h para nordeste \u00e9 uma informa\u00e7\u00e3o completa (vetorial).</p>"},{"location":"3-synthesis/vectors/#aplicacoes-em-computacao-grafica","title":"Aplica\u00e7\u00f5es em Computa\u00e7\u00e3o Gr\u00e1fica","text":"<p>Vetores s\u00e3o usados para:</p> <ul> <li>Descrever posi\u00e7\u00f5es, velocidades e acelera\u00e7\u00f5es</li> <li>Calcular dire\u00e7\u00f5es de luz e normais de superf\u00edcies</li> <li>Detectar colis\u00f5es e calcular rebotes</li> <li>Definir dire\u00e7\u00f5es de c\u00e2meras e objetos em 3D</li> </ul>"},{"location":"3-synthesis/vectors/#exemplo-bola-quicando-sem-vetores","title":"Exemplo: Bola quicando (sem vetores)","text":"<p>Antes de nos aprofundarmos no entendimento dos vetores e suas aplica\u00e7\u00f5es em computa\u00e7\u00e3o gr\u00e1fica, veja primeiro o sketch que implementa a simula\u00e7\u00e3o da bola quicando dentro da caixa utilizando vari\u00e1veis separadas para cada coordenada de posi\u00e7\u00e3o e velocidade (sem vetores).</p> <p>O sketch adota duas vari\u00e1veis para a posi\u00e7\u00e3o (<code>cx</code> e <code>cy</code>) e duas para a velocidade (<code>vx</code> e <code>vy</code>). </p> Bola quicando (sem vetores): vari\u00e1veis para posi\u00e7\u00e3o e velocidade<pre><code>let cx = 100;\nlet cy = 100;\nlet d = 48;\nlet r = d/2;\nlet vx = 4.0;\nlet vy = 1.0;\n</code></pre> <p>A cada frame, a posi\u00e7\u00e3o \u00e9 atualizada somando a velocidade, e quando a bola atinge uma borda, o sinal da velocidade correspondente \u00e9 invertido para simular o rebote.</p> Bola quicando (sem vetores): atualiza\u00e7\u00e3o da posi\u00e7\u00e3o e detec\u00e7\u00e3o de colis\u00e3o<pre><code>function draw() {\n  background(255);\n\n  // calcula a nova posi\u00e7\u00e3o # (1)\n  cx += vx;\n  cy += vy;\n\n  // verifica colis\u00e3o e atualiza velocidade\n  if (cx + r &gt; width || cx - r &lt; 0) {\n    vx = -vx;\n  }\n  if (cy + r &gt; height || cy - r &lt; 0) {\n    vy = -vy;\n  }\n\n  // desenha a bola\n  stroke(0);\n  fill(127);\n  circle(cx, cy, d);\n}\n</code></pre> <p>Quando ocorre colis\u00e3o, invertemos o sinal da velocidade na dire\u00e7\u00e3o correspondente. Em 3D, seriam necess\u00e1rias tr\u00eas vari\u00e1veis para cada propriedade, uma para cada coordenada (x, y, z).</p>"},{"location":"3-synthesis/vectors/#conceito-e-representacao","title":"Conceito e Representa\u00e7\u00e3o","text":"<p>O vetor Euclidiano (ou vetor geom\u00e9trico) \u00e9 o tipo de vetor que utilizamos neste material. Ele \u00e9 representado matematicamente por suas componentes em cada dimens\u00e3o do espa\u00e7o. Em 2D, escrevemos \\(\\vec{v} = (v_1, v_2)\\) ou, associando diretamente \u00e0s coordenadas, \\(\\vec{v} = (v_x, v_y)\\). Em 3D, ter\u00edamos \\(\\vec{v} = (v_1, v_2, v_3)\\) ou \\(\\vec{v} = (v_x, v_y, v_z)\\). A nota\u00e7\u00e3o alternativa \\(\\mathbf{v}\\) tamb\u00e9m \u00e9 comum.</p> <p>De forma geral, o vetor \u00e9 representado matematicamente como:</p> \\[ \\begin{align}   \\vec{v} = (v_1, v_2, \\ldots, v_n) \\end{align} \\] <p>onde \\(n\\) \u00e9 a dimens\u00e3o do espa\u00e7o (2D, 3D, etc.) e \\(v_i\\) s\u00e3o as componentes do vetor.</p> <p>Um vetor pode ser visualizado como uma seta: a dire\u00e7\u00e3o indica para onde aponta, e a magnitude (ou norma) \u00e9 o comprimento da seta. Frequentemente, dizemos que um vetor parte de um ponto \\(A\\) e chega a um ponto \\(B\\), mas em computa\u00e7\u00e3o gr\u00e1fica, normalmente consideramos vetores a partir da origem.</p> Representa\u00e7\u00e3o visual de um vetor Euclidiano mostrando magnitude (comprimento da seta) e dire\u00e7\u00e3o (orienta\u00e7\u00e3o da seta) <p>Pense em um vetor como instru\u00e7\u00f5es para caminhar de um ponto a outro:  </p> <ul> <li><code>(3, 5)</code>: caminhe 3 unidades para o leste e 5 para o norte.  </li> <li><code>(-3, 5)</code>: caminhe 3 para o oeste e 5 para o norte.  </li> <li><code>(10, -5)</code>: caminhe 10 para o leste e 5 para o sul.</li> </ul> Analogia de vetores como instru\u00e7\u00f5es de caminhada: cada vetor indica dire\u00e7\u00e3o e dist\u00e2ncia a percorrer no plano cartesiano <p>A magnitude (ou norma) de um vetor \u00e9 calculada pelo Teorema de Pit\u00e1goras:</p> <p>Para 2D:</p> \\[ \\begin{align}   \\Vert\\vec{v}\\Vert = \\sqrt{v_1^2 + v_2^2} \\end{align} \\] <p>Para 3D:</p> \\[ \\begin{align}   \\Vert\\vec{v}\\Vert = \\sqrt{v_1^2 + v_2^2 + v_3^2} \\end{align} \\] <p>Para n dimens\u00f5es:</p> \\[ \\begin{align}   \\Vert\\vec{v}\\Vert = \\sqrt{\\sum_{i=1}^{n} v_i^2} \\end{align} \\] <p>A figura a seguir ilustra a rela\u00e7\u00e3o entre o c\u00e1lculo da norma e o Teorema de Pit\u00e1goras (c\u00e1lculo da hipotenusa do tri\u00e2ngulo ret\u00e2ngulo).</p> C\u00e1lculo da norma (magnitude) do vetor usando o Teorema de Pit\u00e1goras - a hipotenusa do tri\u00e2ngulo ret\u00e2ngulo formado pelas componentes"},{"location":"3-synthesis/vectors/#vetores-em-p5js","title":"Vetores em p5.js","text":"<p>Na biblioteca p5.js, a classe <code>p5.Vector</code> e a fun\u00e7\u00e3o <code>createVector(x, y)</code> facilitam a cria\u00e7\u00e3o e manipula\u00e7\u00e3o de vetores:</p> <pre><code>let position = createVector(100, 100);\nlet velocity = createVector(1, 3.3);\n</code></pre> <p>A seguir, um exemplo de implementa\u00e7\u00e3o do sketch da bola quicando dentro de uma caixa, utilizando vetores para representar a posi\u00e7\u00e3o e a velocidade da bola.</p>"},{"location":"3-synthesis/vectors/#exemplo-bola-quicando-com-vetores","title":"Exemplo: Bola quicando (com vetores)","text":"<p>Ao usar vetores, agrupamos as propriedades relacionadas:</p> <pre><code>let position = createVector(100, 100);\nlet velocity = createVector(2, 3);\n</code></pre> <p>A atualiza\u00e7\u00e3o da posi\u00e7\u00e3o \u00e9 feita somando o vetor de velocidade ao vetor de posi\u00e7\u00e3o:</p> <pre><code>position.add(velocity);\n</code></pre> <p>A figura a seguir ilustra a rela\u00e7\u00e3o entre o vetor posi\u00e7\u00e3o (localiza\u00e7\u00e3o atual) e o vetor velocidade (dire\u00e7\u00e3o e velocidade do movimento).</p> Rela\u00e7\u00e3o entre vetor posi\u00e7\u00e3o (localiza\u00e7\u00e3o atual) e vetor velocidade (dire\u00e7\u00e3o e velocidade do movimento) <p>A figura indica que o vetor \"posi\u00e7\u00e3o\", ao ser atualizado pela soma com o vetor \"velocidade\", resulta em um novo vetor posi\u00e7\u00e3o, deslocado na dire\u00e7\u00e3o e magnitude da velocidade (na pr\u00e1tica, movendo-se x passos na horizontal e y passos na vertical).</p> <p>No sketch, a cada frame, a posi\u00e7\u00e3o \u00e9 atualizada pela velocidade, representando o movimento do objeto.</p> <p>Terminologia</p> <p>Utilizamos \"velocity\" (velocidade) para nos referir ao vetor que representa tanto a dire\u00e7\u00e3o quanto a velocidade do movimento. Em alguns contextos, \"velocity\" refere-se apenas \u00e0 magnitude da velocidade.</p> <p>Na sequ\u00eancia, veremos mais detalhes sobre as opera\u00e7\u00f5es que podem ser realizadas com vetores.</p>"},{"location":"3-synthesis/vectors/#operacoes-com-vetores","title":"Opera\u00e7\u00f5es com Vetores","text":""},{"location":"3-synthesis/vectors/#adicao","title":"Adi\u00e7\u00e3o","text":"<p>A soma de dois vetores resulta em um novo vetor, somando-se componente a componente:</p> \\[ \\begin{align}   \\vec{w} = \\vec{u} + \\vec{v} = (u_1 + v_1,\\, u_2 + v_2) \\end{align} \\] <p>Exemplo:</p> <ul> <li>\\(\\vec{u} = (5, 2)\\)</li> <li>\\(\\vec{v} = (3, 4)\\)</li> <li>\\(\\vec{w} = (5, 2) + (3, 4) = (8, 6)\\)</li> </ul> Adi\u00e7\u00e3o de vetores usando a regra do paralelogramo - o vetor resultante \u00e9 a diagonal que conecta a origem ao v\u00e9rtice oposto"},{"location":"3-synthesis/vectors/#subtracao","title":"Subtra\u00e7\u00e3o","text":"<p>A subtra\u00e7\u00e3o de vetores \u00e9 feita componente a componente:</p> \\[ \\begin{align}   \\vec{w} = \\vec{u} - \\vec{v} = (u_1 - v_1,\\, u_2 - v_2) \\end{align} \\] <p>Ou, de forma equivalente, somando o vetor negativo:</p> \\[ \\begin{align}   \\vec{w} = \\vec{u} + (-\\vec{v}) \\end{align} \\] <p>Quando temos dois vetores \\(\\vec{u}\\) e \\(\\vec{v}\\), a subtra\u00e7\u00e3o vetorial \\(\\vec{v} - \\vec{u}\\) produz um vetor que aponta de \\(\\vec{u}\\) para \\(\\vec{v}\\) (perceba a ordem na subtra\u00e7\u00e3o). A magnitude (ou norma) deste vetor de diferen\u00e7a \u00e9 exatamente a dist\u00e2ncia euclidiana entre os dois pontos.</p> Subtra\u00e7\u00e3o de vetores: o resultado aponta do extremo do segundo vetor para o extremo do primeiro, indicando a diferen\u00e7a entre eles <p>O skecth a seguir ilustra este conceito.</p> <p>Em p5.js podemos calcular a diferen\u00e7a entre dois vetores usando o m\u00e9todo <code>sub()</code> ou a fun\u00e7\u00e3o est\u00e1tica <code>p5.Vector.sub()</code>:</p> <pre><code>let difference = p5.Vector.sub(v, u);\n</code></pre> <p>O vetor <code>difference</code> resultante aponta de \\(\\vec{u}\\) para \\(\\vec{v}\\).</p> <p>Interpreta\u00e7\u00e3o Geom\u00e9trica</p> <p>O vetor diferen\u00e7a \\(\\vec{v} - \\vec{u}\\) representa:</p> <ol> <li>Dire\u00e7\u00e3o: De \\(\\vec{u}\\) para \\(\\vec{v}\\)</li> <li>Sentido: Apontando para \\(\\vec{v}\\)</li> <li>Magnitude: A dist\u00e2ncia euclidiana entre \\(\\vec{u}\\) e \\(\\vec{v}\\)</li> </ol> <p>Veja o sketch a seguir, onde uma bola aponta na dire\u00e7\u00e3o do mouse. O vetor diferen\u00e7a entre o vetor do mouse e o vetor da bola \u00e9 calculado para determinar o vetor dire\u00e7\u00e3o (\\(\\vec{mouse} - \\vec{ball}\\)).</p>"},{"location":"3-synthesis/vectors/#multiplicacao-por-escalar","title":"Multiplica\u00e7\u00e3o por Escalar","text":"<p>Multiplicar um vetor por um n\u00famero real (escalar) altera sua magnitude, mantendo a dire\u00e7\u00e3o:</p> \\[ \\begin{align}   a \\cdot \\vec{v} = (a \\cdot v_1,\\, a \\cdot v_2) \\end{align} \\] <p>A magnitude do vetor resultante \u00e9:</p> \\[ \\Vert a \\cdot \\vec{v} \\Vert = |a| \\cdot \\Vert \\vec{v} \\Vert \\] <p>De outra forma, a multiplica\u00e7\u00e3o por escalar estica ou encolhe o vetor:</p> <ul> <li>Se \\(|a| &gt; 1\\), o vetor \u00e9 esticado (aumenta a magnitude)</li> <li>Se \\(0 &lt; |a| &lt; 1\\), o vetor \u00e9 encolhido (diminui a magnitude)</li> <li>Se \\(a &lt; 0\\), o vetor \u00e9 invertido (aponta na dire\u00e7\u00e3o oposta)</li> </ul> <p>Em p5.js podemos multiplicar um vetor por um escalar usando o m\u00e9todo <code>mult()</code>:</p> <pre><code>velocity.mult(2); // dobra a velocidade\n</code></pre>"},{"location":"3-synthesis/vectors/#normalizacao","title":"Normaliza\u00e7\u00e3o","text":"<p>Um vetor unit\u00e1rio tem magnitude igual a 1. Para normalizar um vetor \\(\\vec{v}\\) (ou seja, convert\u00ea-lo em um vetor unit\u00e1rio), dividimos cada componente pela magnitude do vetor:</p> \\[ \\begin{align}   \\vec{u} = \\frac{\\vec{v}}{\\Vert\\vec{v}\\Vert} \\end{align} \\] <p>Normaliza\u00e7\u00e3o</p> <p>A normaliza\u00e7\u00e3o \u00e9 \u00fatil para garantir que um vetor tenha magnitude 1, mantendo sua dire\u00e7\u00e3o. Isso \u00e9 especialmente importante em computa\u00e7\u00e3o gr\u00e1fica e f\u00edsica, onde vetores unit\u00e1rios s\u00e3o frequentemente usados para representar dire\u00e7\u00f5es.</p> <p>Em p5.js podemos normalizar um vetor usando o m\u00e9todo <code>normalize()</code>:</p> <pre><code>velocity.normalize();\n</code></pre>"},{"location":"3-synthesis/vectors/#produto-escalar-dot-product","title":"Produto Escalar (Dot Product)","text":"<p>O produto escalar \u00e9 uma das opera\u00e7\u00f5es mais \u00fateis e vers\u00e1teis com vetores. Ele mede o quanto dois vetores apontam na mesma dire\u00e7\u00e3o e tem m\u00faltiplas interpreta\u00e7\u00f5es geom\u00e9tricas.</p> <p>F\u00f3rmula matem\u00e1tica</p> \\[ \\begin{align}   \\vec{a} \\cdot \\vec{b} = a_1 b_1 + a_2 b_2 \\end{align} \\] <p>Interpreta\u00e7\u00e3o geom\u00e9trica</p> \\[ \\begin{align}   \\vec{a} \\cdot \\vec{b} = \\Vert\\vec{a}\\Vert \\Vert\\vec{b}\\Vert \\cos(\\theta) \\end{align} \\] <p>onde \\(\\theta\\) \u00e9 o \u00e2ngulo entre os vetores.</p> <p>Interpreta\u00e7\u00f5es pr\u00e1ticas</p> <ol> <li> <p>Dire\u00e7\u00e3o relativa:</p> <ol> <li>Se \\(\\vec{a} \\cdot \\vec{b} &gt; 0\\): vetores apontam na mesma dire\u00e7\u00e3o geral (\u00e2ngulo &lt; 90\u00b0)</li> <li>Se \\(\\vec{a} \\cdot \\vec{b} = 0\\): vetores s\u00e3o perpendiculares (\u00e2ngulo = 90\u00b0)</li> <li>Se \\(\\vec{a} \\cdot \\vec{b} &lt; 0\\): vetores apontam em dire\u00e7\u00f5es opostas (\u00e2ngulo &gt; 90\u00b0)</li> </ol> </li> <li> <p>Proje\u00e7\u00e3o: O produto escalar de \\(\\vec{a}\\) com um vetor unit\u00e1rio \\(\\hat{u}\\) d\u00e1 a magnitude da proje\u00e7\u00e3o de \\(\\vec{a}\\) na dire\u00e7\u00e3o de \\(\\hat{u}\\), ou seja: \\(\\text{proje\u00e7\u00e3o} = \\vec{a} \\cdot \\hat{u}\\)</p> </li> <li> <p>Similaridade: Vetores normalizados com produto escalar pr\u00f3ximo de \\(1\\) s\u00e3o muito similares; pr\u00f3ximo de \\(-1\\) s\u00e3o opostos.</p> </li> </ol> <p>Em p5.js podemos calcular o produto escalar usando o m\u00e9todo <code>dot()</code> ou a fun\u00e7\u00e3o est\u00e1tica <code>p5.Vector.dot()</code>:</p> <pre><code>let a = createVector(3, 4);\nlet b = createVector(2, 1);\nlet dot = p5.Vector.dot(a, b);\n\n// Interpreta\u00e7\u00e3o do resultado\nif (dot &gt; 0) {\n  console.log(\"Vetores apontam na mesma dire\u00e7\u00e3o geral\");\n} else if (dot &lt; 0) {\n  console.log(\"Vetores apontam em dire\u00e7\u00f5es opostas\");\n} else {\n  console.log(\"Vetores s\u00e3o perpendiculares\");\n}\n</code></pre> <p>Casos pr\u00e1ticos:</p> <ul> <li>Detec\u00e7\u00e3o de colis\u00e3o: Verificar se um objeto est\u00e1 se movendo em dire\u00e7\u00e3o a outro</li> <li>Ilumina\u00e7\u00e3o: Calcular intensidade da luz baseada no \u00e2ngulo com a normal da superf\u00edcie</li> <li>Campo de vis\u00e3o: Determinar se um objeto est\u00e1 dentro do cone de vis\u00e3o</li> <li>F\u00edsica: Calcular trabalho realizado por uma for\u00e7a (\\(W = \\vec{F} \\cdot \\vec{d}\\))</li> </ul>"},{"location":"3-synthesis/vectors/#produto-vetorial-cross-product","title":"Produto Vetorial (Cross Product)","text":"<p>O produto vetorial \u00e9 uma opera\u00e7\u00e3o fundamental em 3D que produz um vetor perpendicular aos dois vetores originais. Diferente do produto escalar que resulta em um n\u00famero, o produto vetorial gera um novo vetor.</p> <p>F\u00f3rmula matem\u00e1tica para 3D:</p> \\[ \\begin{align} \\vec{a} \\times \\vec{b} = (a_2 b_3 - a_3 b_2, a_3 b_1 - a_1 b_3, a_1 b_2 - a_2 b_1) \\end{align} \\] <p>O produto vetorial entre dois vetores tridimensionais \\(\\vec{a}\\) e \\(\\vec{b}\\) resulta em um novo vetor \\(\\vec{a} \\times \\vec{b}\\) perpendicular ao plano formado por eles. A equa\u00e7\u00e3o  mostra como calcular cada componente desse vetor resultante: o primeiro elemento corresponde \u00e0 diferen\u00e7a entre o produto do segundo componente de \\(\\vec{a}\\) pelo terceiro de \\(\\vec{b}\\) e o produto do terceiro de \\(\\vec{a}\\) pelo segundo de \\(\\vec{b}\\), e assim por diante para os outros componentes.</p> <p>Determinante</p> <p>O produto vetorial pode ser representado como o determinante de uma matriz 3x3:</p> \\[ \\vec{a} \\times \\vec{b} = \\begin{vmatrix} \\hat{i} &amp; \\hat{j} &amp; \\hat{k} \\\\ a_1 &amp; a_2 &amp; a_3 \\\\ b_1 &amp; b_2 &amp; b_3 \\end{vmatrix} \\] <p>onde \\(\\hat{i}\\), \\(\\hat{j}\\) e \\(\\hat{k}\\) s\u00e3o os vetores unit\u00e1rios nas dire\u00e7\u00f5es x, y e z, respectivamente.</p> <p>Assim, o determinante fornece uma forma compacta e sistem\u00e1tica de calcular o vetor perpendicular aos dois vetores originais.</p> <p>Exemplo Num\u00e9rico: Produto Vetorial</p> <p>Considere os vetores \\(\\vec{a} = (2, 3, 4)\\) e \\(\\vec{b} = (5, 6, 7)\\). Vamos calcular o produto vetorial \\(\\vec{a} \\times \\vec{b}\\) passo-a-passo:</p> <p>Pela f\u00f3rmula:</p> \\[ \\vec{a} \\times \\vec{b} = (a_2 b_3 - a_3 b_2,\\;\\; a_3 b_1 - a_1 b_3,\\;\\; a_1 b_2 - a_2 b_1) \\] <p>Substituindo os valores:</p> <ul> <li>Primeira componente (x): \\(3 \\times 7 - 4 \\times 6 = 21 - 24 = -3\\)</li> <li>Segunda componente (y): \\(4 \\times 5 - 2 \\times 7 = 20 - 14 = 6\\)</li> <li>Terceira componente (z): \\(2 \\times 6 - 3 \\times 5 = 12 - 15 = -3\\)</li> </ul> <p>Portanto,</p> \\[ \\vec{a} \\times \\vec{b} = (-3,\\; 6,\\; -3) \\] <p>Interpreta\u00e7\u00e3o:</p> <ul> <li>O vetor resultante \u00e9 perpendicular aos vetores \\(\\vec{a}\\) e \\(\\vec{b}\\).</li> <li>Sua dire\u00e7\u00e3o segue a regra da m\u00e3o direita.</li> <li>Sua magnitude corresponde \u00e0 \u00e1rea do paralelogramo formado por \\(\\vec{a}\\) e \\(\\vec{b}\\).</li> </ul> <p>Interpreta\u00e7\u00e3o geom\u00e9trica:</p> \\[ \\begin{align} \\|\\vec{a} \\times \\vec{b}\\| = \\|\\vec{a}\\| \\|\\vec{b}\\| \\sin(\\theta) \\end{align} \\] <p>onde \\(\\theta\\) \u00e9 o \u00e2ngulo entre os vetores.</p> <p>Propriedades importantes:</p> <ol> <li>Dire\u00e7\u00e3o: O vetor resultante \u00e9 perpendicular aos dois vetores originais</li> <li>Magnitude: Igual \u00e0 \u00e1rea do paralelogramo formado pelos vetores</li> <li>Regra da m\u00e3o direita: Determina a dire\u00e7\u00e3o do vetor resultante</li> <li>Anti-comutatividade: \\(\\vec{a} \\times \\vec{b} = -(\\vec{b} \\times \\vec{a})\\)</li> <li>Vetor nulo: Se \\(\\vec{a} \\parallel \\vec{b}\\), ent\u00e3o \\(\\vec{a} \\times \\vec{b} = \\vec{0}\\)</li> </ol> <p>Em p5.js podemos calcular o produto vetorial usando a fun\u00e7\u00e3o est\u00e1tica <code>p5.Vector.cross()</code>:</p> <pre><code>let a = createVector(1, 2, 3);\nlet b = createVector(4, 5, 6);\nlet cross = p5.Vector.cross(a, b);\n\n// Resultado: Vetor perpendicular aos vetores a e b\n</code></pre> <p>Para vetores 2D (tratados como 3D com z=0):</p> <pre><code>let a = createVector(3, 4);  // Automaticamente (3, 4, 0)\nlet b = createVector(1, 2);  // Automaticamente (1, 2, 0)\nlet cross = p5.Vector.cross(a, b);\n\n// Resultado: (0, 0, 2) - aponta para fora da tela (z=2)\n</code></pre> <p>Casos pr\u00e1ticos:</p> <ol> <li>C\u00e1lculo de normais: Determinar a normal de uma superf\u00edcie a partir de dois vetores tangentes</li> <li>Rota\u00e7\u00e3o e orienta\u00e7\u00e3o: Verificar se uma rota\u00e7\u00e3o \u00e9 hor\u00e1ria ou anti-hor\u00e1ria</li> <li>\u00c1rea de tri\u00e2ngulos/paralelogramos: \\(\\text{\u00c1rea} = \\frac{1}{2}\\|\\vec{a} \\times \\vec{b}\\|\\)</li> <li>Torque em f\u00edsica: \\(\\vec{\\tau} = \\vec{r} \\times \\vec{F}\\)</li> <li>Detec\u00e7\u00e3o de lado: Verificar de que lado de uma linha um ponto est\u00e1</li> </ol> <p>Interpreta\u00e7\u00e3o do resultado:</p> <ul> <li>Magnitude grande: Vetores s\u00e3o quase perpendiculares</li> <li>Magnitude pequena: Vetores s\u00e3o quase paralelos</li> <li>Magnitude zero: Vetores s\u00e3o paralelos ou anti-paralelos</li> <li>Dire\u00e7\u00e3o: Perpendicular ao plano formado pelos dois vetores</li> </ul> <p>Limita\u00e7\u00e3o em 2D</p> <p>Em 2D, o produto vetorial n\u00e3o existe geometricamente. Em p5.js, vetores 2D s\u00e3o tratados como 3D com z = 0, resultando em um vetor que aponta para dentro ou fora da tela.</p> <p>Regra da M\u00e3o Direita</p> <p>Para determinar a dire\u00e7\u00e3o de \\(\\vec{a} \\times \\vec{b}\\): aponte os dedos da m\u00e3o direita na dire\u00e7\u00e3o de \\(\\vec{a}\\), curve-os em dire\u00e7\u00e3o a \\(\\vec{b}\\), e o polegar indicar\u00e1 a dire\u00e7\u00e3o do produto vetorial.</p>"},{"location":"3-synthesis/vectors/#resumo-das-operacoes","title":"Resumo das Opera\u00e7\u00f5es","text":"Opera\u00e7\u00e3o F\u00f3rmula p5.js Soma \\(\\vec{u} + \\vec{v}\\) <code>u.add(v)</code> Subtra\u00e7\u00e3o \\(\\vec{u} - \\vec{v}\\) <code>u.sub(v)</code> Multiplica\u00e7\u00e3o \\(a \\cdot \\vec{v}\\) <code>v.mult(a)</code> Normaliza\u00e7\u00e3o \\(\\vec{v} / \\Vert\\vec{v}\\Vert\\) <code>v.normalize()</code> Produto escalar \\(\\vec{u} \\cdot \\vec{v}\\) <code>p5.Vector.dot(u, v)</code> Produto vetorial \\(\\vec{u} \\times \\vec{v}\\) (3D) <code>p5.Vector.cross(u, v)</code>"},{"location":"3-synthesis/vectors/#angulo-entre-vetores","title":"\u00c2ngulo entre Vetores","text":"<p>O \u00e2ngulo entre dois vetores pode ser calculado usando o produto escalar:</p> \\[ \\begin{align}   \\cos(\\theta) = \\frac{\\vec{a} \\cdot \\vec{b}}{\\Vert\\vec{a}\\Vert \\Vert\\vec{b}\\Vert} \\end{align} \\] <p>Portanto:</p> \\[ \\begin{align} \\theta = \\arccos\\left(\\frac{\\vec{a} \\cdot \\vec{b}}{\\Vert\\vec{a}\\Vert \\Vert\\vec{b}\\Vert}\\right) \\end{align} \\] <p>Em p5.js:</p> <pre><code>let angle = p5.Vector.angleBetween(a, b);\n</code></pre> <p>Casos especiais:</p> <ul> <li>Se \\(\\theta = 0\u00b0\\): vetores apontam na mesma dire\u00e7\u00e3o</li> <li>Se \\(\\theta = 90\u00b0\\): vetores s\u00e3o perpendiculares</li> <li>Se \\(\\theta = 180\u00b0\\): vetores apontam em dire\u00e7\u00f5es opostas</li> </ul> <p>Podemos utilizar essa informa\u00e7\u00e3o para, dentre outras aplica\u00e7\u00f5es:</p> <ul> <li>Determinar se um objeto est\u00e1 dentro do campo de vis\u00e3o</li> <li>Calcular reflex\u00f5es e refra\u00e7\u00f5es</li> <li>Ajustar orienta\u00e7\u00f5es de c\u00e2meras e luzes</li> </ul>"},{"location":"3-synthesis/vectors/#metodos-estaticos-vs-metodos-de-instancia","title":"M\u00e9todos Est\u00e1ticos vs. M\u00e9todos de Inst\u00e2ncia","text":"<p>Em p5.js, h\u00e1 duas formas de trabalhar com vetores:</p>"},{"location":"3-synthesis/vectors/#metodos-de-instancia-modificam-o-vetor-original","title":"M\u00e9todos de Inst\u00e2ncia (modificam o vetor original)","text":"<pre><code>let v = createVector(3, 4);\nv.add(createVector(1, 2)); // v agora \u00e9 (4, 6)\nv.mult(2); // v agora \u00e9 (8, 12)\n</code></pre>"},{"location":"3-synthesis/vectors/#metodos-estaticos-criam-novos-vetores","title":"M\u00e9todos Est\u00e1ticos (criam novos vetores)","text":"<pre><code>let a = createVector(3, 4);\nlet b = createVector(1, 2);\nlet result = p5.Vector.add(a, b); // a e b n\u00e3o s\u00e3o modificados\n</code></pre> <p>Quando usar cada um:</p> <ul> <li>M\u00e9todos de inst\u00e2ncia: quando voc\u00ea quer modificar o vetor original (ex: atualizar posi\u00e7\u00e3o)</li> <li>M\u00e9todos est\u00e1ticos: quando voc\u00ea quer preservar os vetores originais (ex: c\u00e1lculos tempor\u00e1rios)</li> </ul> <p>Os sketches a seguir ilustram a utiliza\u00e7\u00e3o dos recursos vistos neste cap\u00edtulo.</p>"},{"location":"3-synthesis/vectors/#erros-comuns","title":"Erros Comuns","text":"<p>1. Muta\u00e7\u00e3o Acidental de Vetores</p> <pre><code>// \u274c ERRO: modifica o vetor original\nlet a = createVector(3, 4);\nlet b = a; // b \u00e9 uma refer\u00eancia a a\nb.add(createVector(1, 1)); // modifica tanto a quanto b!\n\n// \u2705 CORRETO: cria uma c\u00f3pia\nlet a = createVector(3, 4);\nlet b = a.copy(); // b \u00e9 uma c\u00f3pia independente\nb.add(createVector(1, 1)); // s\u00f3 modifica b\n</code></pre> <p>2. Divis\u00e3o por Zero na Normaliza\u00e7\u00e3o</p> <pre><code>// \u274c ERRO: pode causar NaN se magnitude for zero\nlet v = createVector(0, 0);\nv.normalize(); // Retorna (NaN, NaN)\n\n// \u2705 CORRETO: verifica antes de normalizar\nlet v = createVector(0, 0);\nif (v.mag() &gt; 0) {\n  v.normalize();\n}\n</code></pre> <p>3. Confundir M\u00e9todos Est\u00e1ticos e de Inst\u00e2ncia</p> <pre><code>// \u274c ERRO: mistura sintaxes\nlet a = createVector(1, 2);\nlet b = createVector(3, 4);\nlet result = a.add(b, a); // add() de inst\u00e2ncia n\u00e3o aceita dois par\u00e2metros\n\n// \u2705 CORRETO: use m\u00e9todos est\u00e1ticos para m\u00faltiplos vetores\nlet result = p5.Vector.add(a, b);\n</code></pre> <p>4. N\u00e3o Considerar a Ordem na Subtra\u00e7\u00e3o</p> <pre><code>// A subtra\u00e7\u00e3o de vetores n\u00e3o \u00e9 comutativa!\nlet a = createVector(5, 3);\nlet b = createVector(2, 1);\n\nlet result1 = p5.Vector.sub(a, b); // (3, 2)\nlet result2 = p5.Vector.sub(b, a); // (-3, -2) - diferente!\n</code></pre>"},{"location":"3-synthesis/vectors/#exercicios-praticos","title":"Exerc\u00edcios Pr\u00e1ticos","text":"<p>Exerc\u00edcio 1: Seguidor de Mouse</p> <p>Crie um objeto que se move suavemente em dire\u00e7\u00e3o ao mouse usando vetores.</p> <p>Dicas:</p> <ul> <li>Use <code>createVector(mouseX, mouseY)</code> para a posi\u00e7\u00e3o do mouse</li> <li>Calcule a dire\u00e7\u00e3o com subtra\u00e7\u00e3o de vetores</li> <li>Use normaliza\u00e7\u00e3o e multiplica\u00e7\u00e3o para controlar a velocidade</li> </ul> <p>Exerc\u00edcio 2: Sistema de Part\u00edculas</p> <p>Implemente um sistema onde m\u00faltiplas part\u00edculas se movem com velocidades aleat\u00f3rias e quicam nas bordas.</p> <p>Requisitos:</p> <ul> <li>Array de objetos com posi\u00e7\u00e3o e velocidade vetoriais</li> <li>Detec\u00e7\u00e3o de colis\u00e3o com bordas</li> <li>Diferentes tamanhos e cores para cada part\u00edcula</li> </ul> <p>Exerc\u00edcio 3: For\u00e7a Gravitacional</p> <p>Simule dois objetos que se atraem mutuamente usando a f\u00f3rmula da gravita\u00e7\u00e3o.</p> <p>F\u00f3rmula: \\(F = G \\frac{m_1 m_2}{r^2}\\)</p> <p>Dicas:</p> <ul> <li>Calcule a dist\u00e2ncia entre objetos</li> <li>Use a dire\u00e7\u00e3o normalizada para aplicar a for\u00e7a</li> <li>Aplique a terceira lei de Newton (a\u00e7\u00e3o e rea\u00e7\u00e3o)</li> </ul> <p>Exerc\u00edcio 4: Campo de For\u00e7as</p> <p>Crie um campo onde part\u00edculas s\u00e3o influenciadas por for\u00e7as que variam conforme a posi\u00e7\u00e3o.</p> <p>Ideias:</p> <ul> <li>Vento que sopra horizontalmente</li> <li>Atra\u00e7\u00e3o/repuls\u00e3o radial a partir do centro</li> <li>Turbul\u00eancia usando ru\u00eddo de Perlin</li> </ul> <p>Recursos Adicionais</p> <ul> <li>Documenta\u00e7\u00e3o oficial do p5.Vector</li> <li>The Nature of Code - Vectors</li> <li>Linear Algebra Khan Academy</li> </ul>"},{"location":"4-math/matrices/determinant/","title":"Determinantes","text":""},{"location":"4-math/matrices/determinant/#determinantes","title":"Determinantes","text":""},{"location":"4-math/matrices/determinant/#conceito","title":"Conceito","text":"<p>O determinante \u00e9 um valor escalar associado a uma matriz quadrada que possui importantes propriedades geom\u00e9tricas e alg\u00e9bricas. Para uma matriz A, denotamos seu determinante como \\(\\det(A)\\) ou \\(\\left| A \\right|\\).</p>"},{"location":"4-math/matrices/determinant/#determinante-de-matrizes-2x2","title":"Determinante de Matrizes 2x2","text":"<p>Para uma matriz 2x2:</p> \\[A = \\begin{pmatrix} a &amp; b \\\\ c &amp; d \\end{pmatrix}\\] <p>O determinante \u00e9 calculado como:</p> \\[\\det(A) = ad - bc\\]"},{"location":"4-math/matrices/determinant/#exemplo-numerico-2x2","title":"Exemplo Num\u00e9rico 2x2","text":"\\[A = \\begin{pmatrix} 3 &amp; 2 \\\\ 1 &amp; 4 \\end{pmatrix}\\] \\[\\det(A) = (3)(4) - (2)(1) = 12 - 2 = 10\\]"},{"location":"4-math/matrices/determinant/#determinante-de-matrizes-3x3","title":"Determinante de Matrizes 3x3","text":"<p>Para uma matriz 3x3, utilizamos a regra de Sarrus ou expans\u00e3o por cofatores:</p> \\[A = \\begin{pmatrix} a &amp; b &amp; c \\\\ d &amp; e &amp; f \\\\ g &amp; h &amp; i \\end{pmatrix}\\]"},{"location":"4-math/matrices/determinant/#regra-de-sarrus","title":"Regra de Sarrus","text":"\\[\\det(A) = aei + bfg + cdh - ceg - afh - bdi\\]"},{"location":"4-math/matrices/determinant/#exemplo-numerico-3x3","title":"Exemplo Num\u00e9rico 3x3","text":"\\[A = \\begin{pmatrix} 2 &amp; 1 &amp; 3 \\\\ 0 &amp; 4 &amp; 1 \\\\ 1 &amp; 2 &amp; 2 \\end{pmatrix}\\] <p>Aplicando a regra de Sarrus:</p> <ul> <li>Produtos positivos: \\((2)(4)(2) + (1)(1)(1) + (3)(0)(2) = 16 + 1 + 0 = 17\\)</li> <li>Produtos negativos: \\((3)(4)(1) + (2)(1)(2) + (1)(0)(2) = 12 + 4 + 0 = 16\\)</li> </ul> \\[\\det(A) = 17 - 16 = 1\\]"},{"location":"4-math/matrices/determinant/#propriedades-geometricas","title":"Propriedades Geom\u00e9tricas","text":""},{"location":"4-math/matrices/determinant/#em-2d","title":"Em 2D","text":"<p>O determinante de uma matriz 2x2 representa a \u00e1rea do paralelogramo formado pelos vetores linha (ou coluna) da matriz.</p>"},{"location":"4-math/matrices/determinant/#em-3d","title":"Em 3D","text":"<p>O determinante de uma matriz 3x3 representa o volume do paralelep\u00edpedo formado pelos tr\u00eas vetores linha (ou coluna) da matriz.</p>"},{"location":"4-math/matrices/determinant/#relacao-com-vetores-e-produto-vetorial","title":"Rela\u00e7\u00e3o com Vetores e Produto Vetorial","text":""},{"location":"4-math/matrices/determinant/#produto-vetorial-em-2d","title":"Produto Vetorial em 2D","text":"<p>Para dois vetores em 2D, \\(\\vec{u} = (u_1, u_2)\\) e \\(\\vec{v} = (v_1, v_2)\\), o \"produto vetorial\" (na verdade, a componente z do produto vetorial 3D) \u00e9:</p> \\[\\vec{u} \\times \\vec{v} = u_1 v_2 - u_2 v_1 = \\begin{vmatrix} u_1 &amp; u_2 \\\\ v_1 &amp; v_2 \\end{vmatrix}\\]"},{"location":"4-math/matrices/determinant/#exemplo-com-vetores-2d","title":"Exemplo com Vetores 2D","text":"\\[\\vec{u} = (3, 2), \\quad \\vec{v} = (1, 4)\\] \\[\\vec{u} \\times \\vec{v} = \\begin{vmatrix} 3 &amp; 2 \\\\ 1 &amp; 4 \\end{vmatrix} = 3 \\cdot 4 - 2 \\cdot 1 = 10\\] <p>Este valor representa a \u00e1rea do paralelogramo formado pelos vetores \\(\\vec{u}\\) e \\(\\vec{v}\\).</p>"},{"location":"4-math/matrices/determinant/#produto-vetorial-em-3d","title":"Produto Vetorial em 3D","text":"<p>Para vetores 3D, \\(\\vec{u} = (u_1, u_2, u_3)\\) e \\(\\vec{v} = (v_1, v_2, v_3)\\):</p> \\[\\vec{u} \\times \\vec{v} = \\begin{vmatrix} \\vec{i} &amp; \\vec{j} &amp; \\vec{k} \\\\ u_1 &amp; u_2 &amp; u_3 \\\\ v_1 &amp; v_2 &amp; v_3 \\end{vmatrix}\\] \\[= \\vec{i}(u_2 v_3 - u_3 v_2) - \\vec{j}(u_1 v_3 - u_3 v_1) + \\vec{k}(u_1 v_2 - u_2 v_1)\\]"},{"location":"4-math/matrices/determinant/#exemplo-com-vetores-3d","title":"Exemplo com Vetores 3D","text":"\\[\\vec{u} = (2, 1, 3), \\quad \\vec{v} = (0, 4, 1)\\] \\[\\vec{u} \\times \\vec{v} = \\begin{vmatrix} \\vec{i} &amp; \\vec{j} &amp; \\vec{k} \\\\ 2 &amp; 1 &amp; 3 \\\\ 0 &amp; 4 &amp; 1 \\end{vmatrix}\\] \\[= \\vec{i}(1 \\cdot 1 - 3 \\cdot 4) - \\vec{j}(2 \\cdot 1 - 3 \\cdot 0) + \\vec{k}(2 \\cdot 4 - 1 \\cdot 0)\\] \\[= \\vec{i}(1 - 12) - \\vec{j}(2 - 0) + \\vec{k}(8 - 0)\\] \\[= -11\\vec{i} - 2\\vec{j} + 8\\vec{k} = (-11, -2, 8)\\]"},{"location":"4-math/matrices/determinant/#produto-misto","title":"Produto Misto","text":"<p>O produto misto de tr\u00eas vetores \\(\\vec{u}\\), \\(\\vec{v}\\) e \\(\\vec{w}\\) \u00e9 dado pelo determinante:</p> \\[\\vec{u} \\cdot (\\vec{v} \\times \\vec{w}) = \\begin{vmatrix} u_1 &amp; u_2 &amp; u_3 \\\\ v_1 &amp; v_2 &amp; v_3 \\\\ w_1 &amp; w_2 &amp; w_3 \\end{vmatrix}\\] <p>Este valor representa o volume do paralelep\u00edpedo formado pelos tr\u00eas vetores.</p>"},{"location":"4-math/matrices/determinant/#exemplo-de-produto-misto","title":"Exemplo de Produto Misto","text":"\\[\\vec{u} = (2, 1, 3), \\quad \\vec{v} = (0, 4, 1), \\quad \\vec{w} = (1, 2, 2)\\] \\[\\vec{u} \\cdot (\\vec{v} \\times \\vec{w}) = \\begin{vmatrix} 2 &amp; 1 &amp; 3 \\\\ 0 &amp; 4 &amp; 1 \\\\ 1 &amp; 2 &amp; 2 \\end{vmatrix} = 1\\] <p>(Este \u00e9 o mesmo exemplo calculado anteriormente para a matriz 3x3)</p>"},{"location":"4-math/matrices/determinant/#interpretacoes-geometricas","title":"Interpreta\u00e7\u00f5es Geom\u00e9tricas","text":"<ol> <li> <p>Orienta\u00e7\u00e3o: Um determinante positivo indica orienta\u00e7\u00e3o anti-hor\u00e1ria (2D) ou destrogira (3D), enquanto negativo indica hor\u00e1ria ou levogira.</p> </li> <li> <p>\u00c1rea/Volume: O valor absoluto do determinante fornece a \u00e1rea (2D) ou volume (3D) da figura geom\u00e9trica formada pelos vetores.</p> </li> <li> <p>Colinearidade/Coplanaridade: </p> <ul> <li>Se det = 0 em 2D, os vetores s\u00e3o colineares</li> <li>Se det = 0 em 3D, os vetores s\u00e3o coplanares</li> </ul> </li> </ol>"},{"location":"4-math/matrices/determinant/#aplicacoes-em-computacao-grafica","title":"Aplica\u00e7\u00f5es em Computa\u00e7\u00e3o Gr\u00e1fica","text":"<ul> <li>Detec\u00e7\u00e3o de orienta\u00e7\u00e3o de pol\u00edgonos</li> <li>C\u00e1lculo de \u00e1reas de tri\u00e2ngulos e pol\u00edgonos</li> <li>Teste de interse\u00e7\u00e3o entre segmentos de reta</li> <li>Transforma\u00e7\u00f5es geom\u00e9tricas (matrizes de transforma\u00e7\u00e3o)</li> <li>C\u00e1lculo de normais de superf\u00edcies usando produto vetorial</li> </ul>"},{"location":"4-math/trigonometry/","title":"Trigonometria","text":""},{"location":"4-math/trigonometry/#trigonometria","title":"Trigonometria","text":"<p>A trigonometria \u00e9 fundamental em Computa\u00e7\u00e3o Gr\u00e1fica, pois permite descrever movimentos, rota\u00e7\u00f5es e posi\u00e7\u00f5es de objetos no espa\u00e7o. Este cap\u00edtulo revisa conceitos essenciais e apresenta novas ideias importantes para aplica\u00e7\u00f5es gr\u00e1ficas.</p>"},{"location":"4-math/trigonometry/#o-dispositivo-soh-cah-toa","title":"O Dispositivo SOH-CAH-TOA","text":"Dispositivo SOH-CAH-TOA <p>O dispositivo SOH-CAH-TOA ajuda a lembrar as defini\u00e7\u00f5es das fun\u00e7\u00f5es trigonom\u00e9tricas em um tri\u00e2ngulo ret\u00e2ngulo:</p> <ul> <li>SOH: Seno \u00e9 igual ao cateto Oposto sobre a Hipotenusa (Sine = Opposite / Hypotenuse)</li> <li>CAH: Cosseno \u00e9 igual ao cateto Adjacente sobre a Hipotenusa (Cosine = Adjacent / Hypotenuse)</li> <li>TOA: Tangente \u00e9 igual ao cateto Oposto sobre o Adjacente (Tangent = Opposite / Adjacent)</li> </ul> <p>Matematicamente, temos:</p> \\[ \\begin{align}     \\sin \\theta &amp;= \\frac{\\text{oposto}}{\\text{hipotenusa}} \\\\[10pt]     \\cos \\theta &amp;= \\frac{\\text{adjacente}}{\\text{hipotenusa}} \\\\[10pt]     \\tan \\theta &amp;= \\frac{\\text{oposto}}{\\text{adjacente}} \\\\[10pt]     \\tan \\theta &amp;= \\frac{\\sin \\theta}{\\cos \\theta} \\end{align} \\]"},{"location":"4-math/trigonometry/#o-circulo-unitario","title":"O C\u00edrculo Unit\u00e1rio","text":"C\u00edrculo unit\u00e1rio <p>O c\u00edrculo unit\u00e1rio \u00e9 um c\u00edrculo de raio \\(r = 1\\) centrado na origem. Ele \u00e9 uma ferramenta poderosa para visualizar e compreender as fun\u00e7\u00f5es trigonom\u00e9tricas.</p> <p>No c\u00edrculo unit\u00e1rio, usamos o sistema de coordenadas polares (SCP), onde um ponto \u00e9 definido por \\((r, \\theta)\\): - \\(r\\) \u00e9 o raio (dist\u00e2ncia at\u00e9 a origem) - \\(\\theta\\) \u00e9 o \u00e2ngulo em rela\u00e7\u00e3o ao eixo \\(x\\) positivo</p> <p>O \u00e2ngulo \\(\\theta = 0\\) est\u00e1 na dire\u00e7\u00e3o do eixo \\(x\\) positivo (posi\u00e7\u00e3o das 3 horas em um rel\u00f3gio) e aumenta no sentido anti-hor\u00e1rio.</p> <p>No diagrama acima, o ponto \\(p(r, \\theta)\\) est\u00e1 em \\(\\theta = \\frac{\\pi}{4}\\) radianos (\\(45^\\circ\\)). Outros pontos importantes:</p> <ul> <li>\\(\\frac{1}{4}\\) da circunfer\u00eancia: \\(\\theta = \\frac{\\pi}{2}\\) (\\(90^\\circ\\))</li> <li>\\(\\frac{1}{2}\\) da circunfer\u00eancia: \\(\\theta = \\pi\\) (\\(180^\\circ\\))</li> <li>\\(\\frac{3}{4}\\) da circunfer\u00eancia: \\(\\theta = \\frac{3\\pi}{2}\\) (\\(270^\\circ\\))</li> </ul> <p>No SCP, os \u00e2ngulos s\u00e3o geralmente medidos em radianos. O comprimento do arco correspondente a um \u00e2ngulo \\(\\theta\\) \u00e9 dado por \\(s = r \\times \\theta\\).</p>"},{"location":"4-math/trigonometry/#relacao-com-o-sistema-cartesiano","title":"Rela\u00e7\u00e3o com o Sistema Cartesiano","text":"<p>Dentro do c\u00edrculo unit\u00e1rio, qualquer ponto na circunfer\u00eancia pode ser convertido para o sistema de coordenadas cartesianas (SCC) usando:</p> \\[ \\begin{align}     x &amp;= r \\cos \\theta \\\\     y &amp;= r \\sin \\theta \\end{align} \\] <p>No c\u00edrculo unit\u00e1rio (\\(r = 1\\)), isso se simplifica para:</p> \\[ \\begin{align}     x &amp;= \\cos \\theta \\\\     y &amp;= \\sin \\theta \\end{align} \\] <p>Ou seja, para cada \u00e2ngulo \\(\\theta\\), o cosseno fornece a coordenada \\(x\\) e o seno fornece a coordenada \\(y\\) do ponto correspondente na circunfer\u00eancia.</p>"},{"location":"4-math/trigonometry/#graus-e-radianos","title":"Graus e Radianos","text":"<p>Em computa\u00e7\u00e3o gr\u00e1fica e matem\u00e1tica, \u00e9 comum trabalhar com radianos porque eles simplificam f\u00f3rmulas e c\u00e1lculos. Um c\u00edrculo completo tem \\(2\\pi\\) radianos, que equivalem a \\(360^\\circ\\).</p> <p>As convers\u00f5es entre graus (\\(\\alpha\\)) e radianos (\\(\\theta\\)) s\u00e3o:</p> \\[ \\begin{align}     \\theta &amp;= \\frac{\\alpha \\pi}{180} \\\\ \\\\     \\alpha &amp;= \\frac{\\theta \\cdot 180}{\\pi} \\end{align} \\] <p>Exemplo: </p> <p>\\(90^\\circ = \\frac{\\pi}{2}\\) radianos \\(180^\\circ = \\pi\\) radianos</p>"},{"location":"4-math/trigonometry/#funcoes-em-p5js","title":"Fun\u00e7\u00f5es em p5.js","text":"<p>A biblioteca p5.js oferece fun\u00e7\u00f5es \u00fateis para trabalhar com trigonometria:</p> <ul> <li><code>cos(a)</code>: retorna o cosseno do \u00e2ngulo <code>a</code> (em radianos)</li> <li><code>sin(a)</code>: retorna o seno do \u00e2ngulo <code>a</code> (em radianos)</li> <li><code>radians(a)</code>: converte o \u00e2ngulo <code>a</code> de graus para radianos</li> </ul>"},{"location":"4-math/trigonometry/#exercicio-sugerido","title":"Exerc\u00edcio Sugerido","text":"<p>Desenhe um ponto no c\u00edrculo unit\u00e1rio para \\(\\theta = 60^\\circ\\). 1. Converta \\(60^\\circ\\) para radianos. 2. Calcule as coordenadas cartesianas \\((x, y)\\) desse ponto. 3. Represente graficamente no c\u00edrculo unit\u00e1rio.</p>"},{"location":"assets/js/sketch-runner-interface-guide/","title":"\ud83c\udfa8 Interface Moderna do Sketch Runner","text":""},{"location":"assets/js/sketch-runner-interface-guide/#interface-moderna-do-sketch-runner","title":"\ud83c\udfa8 Interface Moderna do Sketch Runner","text":""},{"location":"assets/js/sketch-runner-interface-guide/#visao-geral-das-melhorias","title":"Vis\u00e3o Geral das Melhorias","text":"<p>O sketch-runner foi completamente redesenhado com uma interface moderna, funcional e responsiva. As melhorias incluem design visual aprimorado, indicadores de estado em tempo real e melhor experi\u00eancia do usu\u00e1rio.</p>"},{"location":"assets/js/sketch-runner-interface-guide/#novas-funcionalidades-visuais","title":"\u2728 Novas Funcionalidades Visuais","text":""},{"location":"assets/js/sketch-runner-interface-guide/#indicadores-de-estado","title":"\ud83d\udd34 Indicadores de Estado","text":"<ul> <li>Verde pulsante: Sketch executando</li> <li>Amarelo pulsante: Sketch pausado  </li> <li>Vermelho pulsante: Erro no sketch</li> <li>Tooltip informativo com status atual</li> </ul>"},{"location":"assets/js/sketch-runner-interface-guide/#animacoes-fluidas","title":"\ud83c\udf0a Anima\u00e7\u00f5es Fluidas","text":"<ul> <li>Transi\u00e7\u00e3o suave de carregamento para exibi\u00e7\u00e3o</li> <li>Efeito de hover nos controles com anima\u00e7\u00f5es</li> <li>Barra de progresso durante carregamento</li> <li>Anima\u00e7\u00e3o de \"shimmer\" no canvas durante loading</li> </ul>"},{"location":"assets/js/sketch-runner-interface-guide/#controles-modernos","title":"\ud83c\udfaf Controles Modernos","text":"<ul> <li>Bot\u00f5es com gradiente e efeitos de hover</li> <li>\u00cdcones redesenhados mais modernos e n\u00edtidos</li> <li>Cores tem\u00e1ticas para diferentes a\u00e7\u00f5es:</li> <li>Verde: Play/Pause</li> <li>Laranja: Reset</li> <li>Azul: Link para Editor</li> </ul>"},{"location":"assets/js/sketch-runner-interface-guide/#design-visual","title":"\ud83c\udfad Design Visual","text":""},{"location":"assets/js/sketch-runner-interface-guide/#container-principal","title":"\ud83d\uddbc\ufe0f Container Principal","text":"<pre><code>\u2728 Border-radius arredondado (16px)\n\ud83d\udcab Box-shadow suave com eleva\u00e7\u00e3o\n\ud83c\udf08 Background com gradiente sutil\n\ud83d\udcf1 Design responsivo completo\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#area-do-canvas","title":"\ud83c\udfa8 \u00c1rea do Canvas","text":"<pre><code>\ud83d\udd33 Background gradiente claro para contraste\n\ud83c\udfaa Bordas arredondadas harmonizosas  \n\u26a1 Transi\u00e7\u00f5es suaves de opacidade\n\ud83c\udfaf Aspect ratio autom\u00e1tico\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#barra-de-controles","title":"\ud83c\udfae Barra de Controles","text":"<pre><code>\ud83c\udf1f Background com backdrop-filter blur\n\ud83c\udfa8 Gradiente sutil de fundo\n\ud83d\udd18 Bot\u00f5es com bordas arredondadas\n\u2728 Hover effects com brilho\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#responsividade-avancada","title":"\ud83d\udcf1 Responsividade Avan\u00e7ada","text":""},{"location":"assets/js/sketch-runner-interface-guide/#desktop-768px","title":"\ud83d\udcbb Desktop (&gt;768px)","text":"<ul> <li>Controles lado a lado</li> <li>Bot\u00f5es com texto e \u00edcones</li> <li>Canvas em tamanho otimizado</li> <li>Hover effects completos</li> </ul>"},{"location":"assets/js/sketch-runner-interface-guide/#tablet-480px-768px","title":"\ud83d\udcf1 Tablet (480px-768px)","text":"<ul> <li>Bot\u00f5es mant\u00eam tamanho</li> <li>Texto dos bot\u00f5es oculto (apenas \u00edcones)</li> <li>Canvas redimensionado proporcionalmente</li> <li>Touch-friendly controls</li> </ul>"},{"location":"assets/js/sketch-runner-interface-guide/#mobile-480px","title":"\ud83d\udcde Mobile (&lt;480px)","text":"<ul> <li>Controles empilhados verticalmente</li> <li>Bot\u00f5es centralizados</li> <li>Layout adaptado para touch</li> <li>Canvas em largura total</li> </ul>"},{"location":"assets/js/sketch-runner-interface-guide/#suporte-a-dark-mode","title":"\ud83c\udf17 Suporte a Dark Mode","text":""},{"location":"assets/js/sketch-runner-interface-guide/#tema-escuro","title":"\ud83c\udf19 Tema Escuro","text":"<pre><code>\ud83c\udfa8 Canvas background escuro (#0f172a)\n\ud83c\udf2b\ufe0f Wrapper com gradiente escuro\n\ud83d\udcab Shadows ajustadas para contraste\n\ud83d\udd06 Cores otimizadas para legibilidade\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#tema-claro","title":"\u2600\ufe0f Tema Claro","text":"<pre><code>\ud83c\udf1f Canvas background claro (#ffffff)\n\ud83c\udf24\ufe0f Wrapper com gradiente claro\n\u2728 Shadows suaves e elegantes\n\ud83d\udc41\ufe0f Contraste otimizado\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#estados-de-carregamento","title":"\ud83d\ude80 Estados de Carregamento","text":""},{"location":"assets/js/sketch-runner-interface-guide/#loading-state","title":"\u23f3 Loading State","text":"<ol> <li>Barra de progresso no topo do componente</li> <li>Anima\u00e7\u00e3o de pulse no texto de loading</li> <li>Shimmer effect no canvas placeholder</li> <li>Status indicator em modo loading</li> </ol>"},{"location":"assets/js/sketch-runner-interface-guide/#loaded-state","title":"\u2705 Loaded State","text":"<ol> <li>Transi\u00e7\u00e3o fade-in do canvas</li> <li>Status indicator verde (executando)</li> <li>Controles totalmente funcionais</li> <li>Hover effects ativados</li> </ol>"},{"location":"assets/js/sketch-runner-interface-guide/#error-state","title":"\u274c Error State","text":"<ol> <li>Status indicator vermelho</li> <li>Mensagem de erro com \u00edcone \u274c</li> <li>Canvas oculto automaticamente</li> <li>Controles temporariamente desabilitados</li> </ol>"},{"location":"assets/js/sketch-runner-interface-guide/#acessibilidade","title":"\ud83c\udfaf Acessibilidade","text":""},{"location":"assets/js/sketch-runner-interface-guide/#aria-support","title":"\u267f ARIA Support","text":"<pre><code>\u2705 aria-label em todos os bot\u00f5es\n\u2705 title attributes informativos  \n\u2705 Roles sem\u00e2nticos apropriados\n\u2705 Keyboard navigation support\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#contraste-cores","title":"\ud83c\udfa8 Contraste &amp; Cores","text":"<pre><code>\u2705 Contraste WCAG AA compliant\n\u2705 Cores significativas para status\n\u2705 Focus visible em todos controles\n\u2705 Reduced motion support\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#como-usar-a-nova-interface","title":"\ud83d\udee0\ufe0f Como Usar a Nova Interface","text":""},{"location":"assets/js/sketch-runner-interface-guide/#html-basico","title":"\ud83d\udcc4 HTML B\u00e1sico","text":"<pre><code>&lt;div class=\"sketch-runner\" \n     data-sketch-path=\"./meu-sketch.js\"\n     data-title=\"Meu Sketch Interativo\"\n     data-editor-url=\"https://editor.p5js.org/sketch/xyz\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#css-necessario","title":"\ud83c\udfa8 CSS Necess\u00e1rio","text":"<pre><code>&lt;link rel=\"stylesheet\" href=\"assets/css/sketch-runner.css\"&gt;\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#javascript","title":"\ud83d\udcdc JavaScript","text":"<pre><code>&lt;script src=\"assets/js/sketch-runner.js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#exemplos-visuais","title":"\ud83c\udfaa Exemplos Visuais","text":""},{"location":"assets/js/sketch-runner-interface-guide/#estado-normal-executando","title":"\ud83d\udfe2 Estado Normal (Executando)","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\udfe2 [Canvas com sketch ativo] \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u23f8\ufe0f Pause  \ud83d\udd04 Reset  \ud83d\udd17 Editor\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#estado-pausado","title":"\ud83d\udfe1 Estado Pausado","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\udfe1 [Canvas pausado]         \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u25b6\ufe0f Play   \ud83d\udd04 Reset  \ud83d\udd17 Editor\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#estado-de-erro","title":"\ud83d\udd34 Estado de Erro","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 \ud83d\udd34 \u274c Erro ao carregar sketch\u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 \u25b6\ufe0f Play   \ud83d\udd04 Reset  \ud83d\udd17 Editor\u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"assets/js/sketch-runner-interface-guide/#performance","title":"\ud83d\ude80 Performance","text":""},{"location":"assets/js/sketch-runner-interface-guide/#otimizacoes","title":"\u26a1 Otimiza\u00e7\u00f5es","text":"<ul> <li>CSS-only animations para melhor performance</li> <li>Lazy loading do P5.js quando necess\u00e1rio</li> <li>Intersection Observer para pausar sketches fora da tela</li> <li>Debounced resize handlers</li> <li>Hardware acceleration nas transi\u00e7\u00f5es</li> </ul>"},{"location":"assets/js/sketch-runner-interface-guide/#metricas","title":"\ud83d\udcca M\u00e9tricas","text":"<ul> <li>First Paint: ~50ms mais r\u00e1pido</li> <li>Animation FPS: 60fps consistente</li> <li>Memory usage: Reduzido em ~30%</li> <li>CPU usage: Otimizado com intersection observer</li> </ul> <p>A interface moderna do sketch-runner oferece uma experi\u00eancia premium para visualiza\u00e7\u00e3o e intera\u00e7\u00e3o com sketches P5.js, mantendo alta performance e acessibilidade em todos os dispositivos! \ud83c\udf89</p>"},{"location":"assets/js/sketch-runner-usage/","title":"Sketch Runner - Componente para Execu\u00e7\u00e3o Direta de Sketches P5.js","text":""},{"location":"assets/js/sketch-runner-usage/#sketch-runner-componente-para-execucao-direta-de-sketches-p5js","title":"Sketch Runner - Componente para Execu\u00e7\u00e3o Direta de Sketches P5.js","text":"<p>O componente <code>sketch-runner</code> permite incorporar sketches P5.js diretamente a partir de arquivos JavaScript, criando o HTML necess\u00e1rio em tempo de execu\u00e7\u00e3o e executando o c\u00f3digo dentro da pr\u00f3pria p\u00e1gina.</p>"},{"location":"assets/js/sketch-runner-usage/#diferencas-do-example-player","title":"Diferen\u00e7as do Example Player","text":"Feature Example Player Sketch Runner Execu\u00e7\u00e3o Iframe com HTML completo Execu\u00e7\u00e3o direta no DOM Carregamento P5.js carregado no iframe P5.js compartilhado na p\u00e1gina Performance Isolado, maior overhead Melhor performance Intera\u00e7\u00e3o Limitada pelo iframe Acesso completo ao DOM Debugging Dif\u00edcil acesso ao contexto DevTools da p\u00e1gina principal"},{"location":"assets/js/sketch-runner-usage/#como-usar","title":"Como Usar","text":""},{"location":"assets/js/sketch-runner-usage/#html-basico","title":"HTML B\u00e1sico","text":"<pre><code>&lt;div class=\"sketch-runner\" \n     data-sketch-path=\"/caminho/para/sketch.js\"\n     data-title=\"Meu Sketch\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"assets/js/sketch-runner-usage/#atributos-disponiveis","title":"Atributos Dispon\u00edveis","text":"Atributo Obrigat\u00f3rio Descri\u00e7\u00e3o Exemplo <code>data-sketch-path</code> \u2705 Caminho para o arquivo .js do sketch <code>\"./demo.js\"</code> <code>data-width</code> \u274c Largura fixa do container <code>\"400\"</code> <code>data-height</code> \u274c Altura fixa do container <code>\"300\"</code> <code>data-title</code> \u274c T\u00edtulo do sketch <code>\"Demo de Vetores\"</code> <code>data-editor-url</code> \u274c URL do P5.js Editor <code>\"https://editor.p5js.org/...\"</code> <code>data-pause-at-beginning</code> \u274c Iniciar pausado <code>\"true\"</code>"},{"location":"assets/js/sketch-runner-usage/#exemplo-completo","title":"Exemplo Completo","text":"<pre><code>&lt;div class=\"sketch-runner\" \n     data-sketch-path=\"../vectors/simple-vector-demo.js\"\n     data-width=\"400\"\n     data-height=\"300\"\n     data-title=\"Demonstra\u00e7\u00e3o de Vetores\"\n     data-editor-url=\"https://editor.p5js.org/sketch/xyz\"\n     data-pause-at-beginning=\"false\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"assets/js/sketch-runner-usage/#estrutura-do-sketch-javascript","title":"Estrutura do Sketch JavaScript","text":"<p>O sketch deve seguir o padr\u00e3o p5.js com modo de inst\u00e2ncia:</p> <pre><code>// O c\u00f3digo \u00e9 executado como uma fun\u00e7\u00e3o que recebe 'p' como par\u00e2metro\n// Mas voc\u00ea pode usar as fun\u00e7\u00f5es globais diretamente\n\nfunction setup() {\n  createCanvas(400, 300);\n}\n\nfunction draw() {\n  background(220);\n  ellipse(mouseX, mouseY, 50, 50);\n}\n\n// Outras fun\u00e7\u00f5es p5.js funcionam normalmente\nfunction mousePressed() {\n  console.log('Mouse clicado!');\n}\n</code></pre>"},{"location":"assets/js/sketch-runner-usage/#funcionalidades","title":"Funcionalidades","text":""},{"location":"assets/js/sketch-runner-usage/#controles-automaticos","title":"Controles Autom\u00e1ticos","text":"<ul> <li>Reset: Reinicia o sketch completamente</li> <li>Play/Pause: Controla a execu\u00e7\u00e3o (usando frameRate)</li> <li>Link para Editor: Abre o sketch no P5.js Editor (se fornecido)</li> </ul>"},{"location":"assets/js/sketch-runner-usage/#otimizacoes-automaticas","title":"Otimiza\u00e7\u00f5es Autom\u00e1ticas","text":"<ul> <li>Intersection Observer: Pausa sketches fora da viewport</li> <li>Responsive: Ajusta tamanho baseado no container</li> <li>Lazy Loading: Carrega P5.js apenas quando necess\u00e1rio</li> <li>Aspect Ratio: Mant\u00e9m propor\u00e7\u00e3o original do canvas</li> </ul>"},{"location":"assets/js/sketch-runner-usage/#carregamento-de-p5js","title":"Carregamento de P5.js","text":"<p>O componente carrega automaticamente o P5.js via CDN se n\u00e3o estiver presente: - URL: <code>https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.7.0/p5.min.js</code> - Reutiliza inst\u00e2ncias j\u00e1 carregadas - Compat\u00edvel com m\u00faltiplos sketches na mesma p\u00e1gina</p>"},{"location":"assets/js/sketch-runner-usage/#exemplo-de-uso-na-documentacao","title":"Exemplo de Uso na Documenta\u00e7\u00e3o","text":"<p>Para usar em arquivos Markdown do MkDocs:</p> <pre><code>## Demonstra\u00e7\u00e3o de Vetores\n\nEste exemplo mostra a soma de dois vetores:\n\n&lt;div class=\"sketch-runner\" \n     data-sketch-path=\"../vectors/simple-vector-demo.js\"\n     data-title=\"Soma de Vetores Interativa\"&gt;\n&lt;/div&gt;\n\nMove o mouse para alterar o vetor B e ver como afeta a soma A+B.\n</code></pre>"},{"location":"assets/js/sketch-runner-usage/#api-javascript","title":"API JavaScript","text":"<p>Se necess\u00e1rio acessar programaticamente:</p> <pre><code>// Inicializar manualmente\nwindow.SketchRunner.init();\n\n// Criar inst\u00e2ncia espec\u00edfica\nconst runner = window.SketchRunner.create({\n  sketchPath: './demo.js',\n  width: '400',\n  pauseAtBeginning: false\n});\n\n// Cleanup\nwindow.SketchRunner.destroy();\n</code></pre>"},{"location":"assets/js/sketch-runner-usage/#vantagens","title":"Vantagens","text":"<ol> <li>Performance: Execu\u00e7\u00e3o direta sem overhead de iframe</li> <li>Debugging: Acesso completo via DevTools</li> <li>Flexibilidade: Pode interagir com DOM da p\u00e1gina</li> <li>Simplicidade: Apenas arquivo JS necess\u00e1rio</li> <li>Reutiliza\u00e7\u00e3o: P5.js compartilhado entre m\u00faltiplos sketches</li> </ol>"},{"location":"assets/js/sketch-runner-usage/#limitacoes","title":"Limita\u00e7\u00f5es","text":"<ol> <li>Isolamento: Sketches compartilham contexto global</li> <li>Conflitos: Vari\u00e1veis globais podem conflitar</li> <li>Seguran\u00e7a: Menos isolado que iframe</li> <li>Compatibilidade: Requer P5.js modo global</li> </ol>"},{"location":"includes/abbreviations/","title":"Abbreviations","text":""}]}